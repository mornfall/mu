// -*- mode: C++; indent-tabs-mode: nil; c-basic-offset: 4 -*-

/*
 * Copyright (C) 2019 Petr Rockai <code@fixp.eu>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#pragma once
#include <string_view>
#include <curl/curl.h>

namespace brq
{
    struct curl
    {
        CURL *_curl = nullptr;
        curl_mime *_mime = nullptr;
        brq::string_builder _data;

        curl()
        {
            _curl = curl_easy_init();
            _mime = curl_mime_init( _curl );
            curl_easy_setopt( _curl, CURLOPT_WRITEFUNCTION, _data_cb );
            curl_easy_setopt( _curl, CURLOPT_WRITEDATA, this );
        }

        curl( curl &&o ) = default;

        ~curl()
        {
            curl_easy_cleanup( _curl );
            curl_mime_free( _mime );
        }

        std::string_view data() { return _data.data(); }

        static size_t _data_cb( char *ptr, size_t, size_t nmemb, void *instance )
        {
            curl *i = static_cast< curl * >( instance );
            i->_data << std::string_view( ptr, nmemb );
            return nmemb;
        }

        curl &add_arg( std::string_view n, std::string_view d )
        {
            TRACE( "add_arg", n, d );
            curl_easy_setopt( _curl, CURLOPT_MIMEPOST, _mime );

            auto part = curl_mime_addpart( _mime );
            curl_mime_name( part, std::string( n ).c_str() );
            curl_mime_data( part, d.begin(), d.size() );
            return *this;
        }

        curl &set_url( std::string_view url )
        {
            TRACE( "set_url", url);
            curl_easy_setopt( _curl, CURLOPT_URL, std::string( url ).c_str() );
            return *this;
        }

        curl &set_ua( std::string_view ua )
        {
            TRACE( "set_ua", ua );
            curl_easy_setopt( _curl, CURLOPT_USERAGENT, std::string( ua ).c_str() );
            return *this;
        }

        using string = std::string;

        template< typename T > T info( CURLINFO i )
        {
            std::conditional_t< std::is_same_v< T, string >, const char *, T > v;
            curl_easy_getinfo( _curl, i, &v );
            return v;
        }

        struct error : std::runtime_error
        {
            int code;
            error( int c, const char *w ) : std::runtime_error( w ), code( c ) {}
        };

        curl &run()
        {
            DEBUG( "request", info< string >( CURLINFO_EFFECTIVE_URL ) );

            if ( auto err = curl_easy_perform( _curl ) )
                brq::raise() << "curl error: " << curl_easy_strerror( err );

            auto code = info< long >( CURLINFO_RESPONSE_CODE );
            DEBUG( "done", code, info< string >( CURLINFO_CONTENT_TYPE ),
                   "took", info< double >( CURLINFO_TOTAL_TIME ), "seconds" );

            if ( code != 200 )
                brq::raise< error >( code ) << "unexpected server response code " << code;

            return *this;
        }
    };
}
