// -*- mode: C++; indent-tabs-mode: nil; c-basic-offset: 4 -*-

/*
 * (c) 2019 Petr Roƒçkai <code@fixp.eu>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#pragma once

#include "brick-assert"
#include "brick-salloc"
#include <atomic>
#include <functional>

namespace brq
{
    template< typename T, bool atomic = false, typename static_allocator = std_new< T > >
    struct refcount_ptr
    {
        template< bool as_atomic >
        using self_t = refcount_ptr< T, as_atomic, static_allocator >;

        using rawptr_t = typename static_allocator::pointer;

        refcount_ptr() noexcept : _ptr( rawptr_t() ) {}
        refcount_ptr( const refcount_ptr &o ) noexcept : refcount_ptr( o._ptr ) {}
        explicit refcount_ptr( rawptr_t v ) noexcept : _ptr( v ) { _get(); }
        refcount_ptr( std::nullptr_t ) : refcount_ptr() {}

        template< typename D, bool from_atomic,
                  typename = std::enable_if_t< std::is_convertible_v< D *, T * > > >
        refcount_ptr( const refcount_ptr< D, from_atomic, static_allocator > &o ) noexcept
            : refcount_ptr( o._ptr )
         {}

        ~refcount_ptr() noexcept { _put(); }
        rawptr_t operator->() const noexcept { return _ptr; }
        T &operator*() const noexcept { return *ptr(); }

        explicit operator bool() const noexcept { return bool( ptr() ); }
        bool operator !() const noexcept { return !ptr(); }

        bool operator==( const refcount_ptr &o ) const noexcept
        {
            return !( *this < o ) && !( o < *this );
        }

        bool operator!=( const refcount_ptr &o ) const noexcept
        {
            return *this < o || o < *this;
        }

        bool operator<( const refcount_ptr &o ) const noexcept
        {
            return std::less< const void * >()( ptr(), o.ptr() );
        }

        template< bool o_atomic >
        refcount_ptr &operator=( const self_t< o_atomic> &o ) noexcept
        {
            if constexpr ( o_atomic == atomic ) /* atomic and !atomic can't alias each other */
                if ( &o == this )
                    return *this;

            _put();
            ptr( o.ptr() );
            _get();
            return *this;
        }

        refcount_ptr &operator=( const refcount_ptr &o ) noexcept
        {
            return operator=< atomic >( o );
        }

        rawptr_t ptr() const noexcept
        {
            if constexpr ( atomic )
            {
                auto val = uint64_t( _ptr.load() ); /* FIXME */
                return rawptr_t( val & ~uint64_t( 1 ) );
            }
            else
                return _ptr;
        }

        void ptr( rawptr_t p ) const noexcept { if constexpr ( atomic ) _ptr.store( p ); else _ptr = p; }

        void _get() const noexcept
        {
            auto p = ptr();
            if ( p )
                p->ref_get();
        }

        void _put() const noexcept
        {
            if ( auto p = ptr(); p && !p->ref_put() )
            {
                static_allocator::destroy( p );
                ptr( rawptr_t() );
            }
        }

        void reset( rawptr_t p = rawptr_t() ) noexcept
        {
            if ( p )
                p->ref_get();
            _put();
            ptr( p );
        }

        bool compare_exchange_strong( self_t< false > &p, self_t< false > n )
        {
            if constexpr ( atomic )
            {
                TRACE( "cmpxchg ", ptr(), p.ptr(), n.ptr() );
                std::atomic< uintptr_t > &self = *reinterpret_cast< std::atomic< uintptr_t > * >( &_ptr );
                uintptr_t expect = self.load() & ~uintptr_t( 1 );
                uintptr_t want = expect | 1;

                while ( !self.compare_exchange_weak( expect, want ) )
                    want = expect | 1, expect = expect & ~uintptr_t( 1 );

                uintptr_t self_val = want & ~uintptr_t( 1 );
                rawptr_t self_ptr = rawptr_t( self_val );

                if ( p.ptr() == self_ptr ) /* success, update this */
                {
                    n._get();
                    p._put();
                    _ptr.store( n.ptr() );
                    return true;
                }
                else /* failed, update p */
                {
                    if ( self_ptr )
                        self_ptr->ref_get();
                    p._put();
                    p.ptr( self_ptr );
                    _ptr.store( self_ptr );
                    return false;
                }
            }
            else
            {
                if ( _ptr == p._ptr )
                {
                    *this = n;
                    return true;
                }
                else
                {
                    p = *this;
                    return false;
                }
            }
        }

        template< typename stream >
        friend auto operator<<( stream &o, const refcount_ptr &p )
            -> decltype( o << std::declval< void * >() )
        {
            return o << p.ptr();
        }

        mutable std::conditional_t< atomic, std::atomic< rawptr_t >, rawptr_t > _ptr;
    };

    template< typename T = uint16_t, bool atomic = false >
    struct refcount_base
    {
        static constexpr const T max = std::numeric_limits< T >::max();

        void ref_get()
        {
            if ( _refcount < max )
                ++ _refcount;
        }

        bool ref_put()
        {
            ASSERT_QUIET;
            ASSERT_LEQ( 1, _refcount );
            return _refcount < max && --_refcount;
        }

        ~refcount_base() { NOISE( this, "destroyed" ); }
        refcount_base() = default;
        refcount_base( const refcount_base & ) : _refcount( 0 ) {}
        refcount_base( refcount_base && ) : _refcount( 0 ) {}
        refcount_base &operator=( refcount_base ) { return *this; }

        std::conditional_t< atomic, std::atomic< T >, T > _refcount = 0;
    };

    template< typename type, bool atomic = false,
              typename static_alloc = std_new< type >,
              typename... alloc_args_t, typename... args_t >
    auto make_refcount_opt( std::tuple< alloc_args_t... > alloc_args, args_t && ... args )
    {
        using ptr = refcount_ptr< type, atomic, static_alloc >;
        return ptr( static_alloc::construct_with( alloc_args, std::forward< args_t >( args )... ) );
    }

    template< typename type, bool atomic = false,
              typename static_alloc = std_new< type >, typename... args_t >
    auto make_refcount( args_t && ... args )
    {
        return make_refcount_opt< type, atomic, static_alloc >( std::tuple{},
                                                                std::forward< args_t >( args )... );
    }
}

// vim: syntax=cpp tabstop=4 shiftwidth=4 expandtab
