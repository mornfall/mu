// -*- mode: C++; indent-tabs-mode: nil; c-basic-offset: 4 -*-

/*
 * (c) 2007--2011 Petr Rockai <me@mornfall.net>
 * (c) 2007--2011 Enrico Zini <enrico@enricozini.org>
 * (c) 2014 Vladimír Štill <xstill@fi.muni.cz>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#pragma once

#include "brick-assert"
#include "brick-except"
#include "brick-string"

#include <sys/types.h>
#include <sys/stat.h>
#include <limits.h>

#ifdef _WIN32
#include <direct.h>
#include <io.h>
#else
#include <unistd.h>
#include <dirent.h>
#include <utime.h>
#include <fcntl.h>
#endif

#include <vector>
#include <string>
#include <cerrno>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <stdexcept>
#include <algorithm>
#include <memory>
#include <limits>

namespace brq
{

#ifdef __unix__
    struct posix_buf : std::streambuf /* based on code by Enrico Zini */
    {
        std::unique_ptr< char[] > _pbuf, _gbuf;
        size_t _buf_size;
        int _fd;

        posix_buf( const posix_buf & ) = delete;
        posix_buf &operator=( const posix_buf & ) = delete;

        posix_buf() : _pbuf( nullptr ), _gbuf( nullptr ), _buf_size( 0 ), _fd( -1 ) {}
        posix_buf( int fd, size_t bufsize = 1024 ) : posix_buf()
        {
            attach( fd, bufsize );
        }

        ~posix_buf()
        {
            if ( _pbuf )
                sync();
            if ( _fd != -1 )
                ::close( _fd );
        }

        void attach( int fd, size_t bufsize = 4096 )
        {
            _pbuf.reset( new char[ bufsize ] );
            _gbuf.reset( new char[ bufsize ] );
            _fd = fd;
            _buf_size = bufsize;
            setp( _pbuf.get(), _pbuf.get() + _buf_size );
            setg( nullptr, nullptr, nullptr );
        }

        /* Sync the posix_buf and detach it from the file descriptor.  posix_buf will
         * not touch the file descriptor anymore, and it is the responsibility of
         * the caller to close it. */

        int detach()
        {
            sync();
            int res = _fd;
            _pbuf.reset( nullptr );
            _gbuf.reset( nullptr );
            _buf_size = 0;
            _fd = -1;
            setp( nullptr, nullptr );
            setg( nullptr, nullptr, nullptr );
            return res;
        }

        int fd() const { return _fd; }

        int overflow( int c )
        {
            sync();
            if ( c != EOF )
            {
                *pptr() = c;
                pbump( 1 );
            }
            return c;
        }

        int underflow()
        {
            int res, err, orig = fcntl( _fd, F_GETFL );
            fcntl( _fd, F_SETFL, orig | O_NONBLOCK );
            res = ::read( _fd, _gbuf.get(), _buf_size ), err = errno;
            fcntl( _fd, F_SETFL, orig & ~O_NONBLOCK );
            if ( res == -1 && err == EAGAIN ) /* pull in at least one character */
                res = ::read( _fd, _gbuf.get(), 1 ), err = errno;
            fcntl( _fd, F_SETFL, orig );

            if ( res > 0 )
                setg( _gbuf.get(), _gbuf.get(), _gbuf.get() + res );
            else
            {
                setg( nullptr, nullptr, nullptr );
                if ( res < 0 )
                    throw std::system_error( err, std::system_category(),
                                             "reading from a file descriptor" );
                return traits_type::eof();
            }
            return *gptr();
        }

        void do_sync( const char *start, int amount )
        {
            while ( amount )
            {
                int res = ::write( _fd, start, amount );
                if ( res < 0 )
                    brq::raise< system_error >() << "writing to a file descriptor";
                amount -= res;
                start += res;
            }
            setp( _pbuf.get(), _pbuf.get() + _buf_size );
        }

        int sync()
        {
            if ( pptr() > pbase() )
                do_sync( pbase(), pptr() - pbase() );
            return 0;
        }
    };

    static inline std::string hostname()
    {
        char host[ HOST_NAME_MAX + 1 ];
        ::gethostname( host, HOST_NAME_MAX );
        return host;
    }
#endif

#if defined( __unix__ ) || defined( __APPLE__ ) || defined( __divine__ )
    const char path_separators[] = { '/' };
#elif defined( _WIN32 )
    const char path_separators[] = { '\\', '/' };
#else
#error please define path_separators for this platform
#endif

    inline bool is_path_separator( char c )
    {
        for ( auto sep : path_separators )
            if ( sep == c )
                return true;
        return false;
    }

    inline split_view split_extension( std::string_view path )
    {
        auto pos = path.rfind( '.' );
        if ( pos == std::string::npos )
            return { path, {} };
        return { path.substr( 0, pos ), path.substr( pos ) };
    }

    inline std::string_view take_extension( std::string_view path )
    {
        return split_extension( path ).second;
    }

    inline std::string_view drop_extension( std::string_view path )
    {
        return split_extension( path ).first;
    }

    inline std::string replace_extension( std::string_view path, std::string_view extension )
    {
        if ( !extension.empty() && extension[0] == '.' )
            return format( drop_extension( path ), extension ).buffer();
        return format( drop_extension( path ), ".", extension ).buffer();
    }

    inline split_view split_filename( std::string_view path )
    {
        auto begin = path.rbegin();
        while ( is_path_separator( *begin ) )
            ++begin;
        auto length = &*begin - &path.front() + 1;
        auto pos = std::find_if( begin, path.rend(), &is_path_separator );
        if ( pos == path.rend() )
            return std::make_pair( std::string(), path.substr( 0, length ) );
        auto count = &*pos - &path.front();
        length -= count + 1;
        return std::make_pair( path.substr( 0, count ), path.substr( count + 1, length ) );
    }

    inline split_view absolute_prefix( std::string_view path )
    {
#ifdef _WIN32 /* this must go before general case, because \ is prefix of \\ */
        if ( path.size() >= 3 && path[ 1 ] == ':' && is_path_separator( path[ 2 ] ) )
            return std::make_pair( path.substr( 0, 3 ), path.substr( 3 ) );
        if ( path.size() >= 2 && is_path_separator( path[ 0 ] ) && is_path_separator( path[ 1 ] ) )
            return std::make_pair( path.substr( 0, 2 ), path.substr( 2 ) );
#endif
        // this is absolute path in both windows and unix
        if ( path.size() >= 1 && is_path_separator( path[ 0 ] ) )
            return std::make_pair( path.substr( 0, 1 ), path.substr( 1 ) );
        return { {}, path };
    }

    inline bool is_absolute( std::string_view path ) { return absolute_prefix( path ).first.size() != 0; }
    inline bool is_relative( std::string_view path ) { return !is_absolute( path ); }

    template< typename It,
              // prohibit taking precedence over variadic join
              typename = typename std::enable_if<
                  !std::is_same< It, std::string >::value &&
                  !std::is_same< It, std::string_view >::value &&
                  !(std::is_pointer< It >::value &&
                    std::is_same< typename std::remove_cv<
                    typename std::remove_pointer< It >::type >::type, char >::value)
                  >::type >
    inline std::string join_path( It begin, It end )
    {
        std::string out;

        for ( ; begin != end; ++begin )
        {
            if ( out.empty() || is_absolute( *begin ) )
                out = *begin;
            else if ( !out.empty() && is_path_separator( out.back() ) )
                out += *begin;
            else
                out += path_separators[0], out += *begin;
        }
        return out;
    }

    inline std::string join_path( std::vector< std::string_view > paths )
    {
        return join_path( paths.begin(), paths.end() );
    }

    template< typename... FilePaths >
    inline std::string join_path( FilePaths &&...paths ) {
        return join_path( std::vector< std::string_view >{ std::forward< FilePaths >( paths )... } );
    }

    inline std::vector< std::string_view > split_path( std::string_view path )
    {
        auto abs = absolute_prefix( path );
        path = abs.second;
        std::vector< std::string_view > out;
        if ( !abs.first.empty() )
            out.push_back( abs.first );
        auto last = path.begin();

        while ( true )
        {
            auto next = std::find_if( last, path.end(), &is_path_separator );
            if ( next == path.end() )
            {
                out.emplace_back( last, next - last );
                return out;
            }
            if ( last != next )
                out.emplace_back( last, next - last );
            last = ++next;
        }
    }

    inline std::string dirname( std::string_view path )
    {
        auto p = split_path( path );
        p.pop_back();
        return join_path( p );
    }

    inline std::string_view basename( std::string_view path )
    {
        return split_path( path ).back();
    }

    inline std::string normalize_path( std::string_view path )
    {
        auto abs = absolute_prefix( path );
        auto split = split_path( abs.second );

        for ( auto it = split.begin(); it != split.end(); ) {
            if ( it->empty() || *it == "." )
                it = split.erase( it );
            else if ( *it == ".." && it != split.begin() && *std::prev( it ) != ".." )
                it = split.erase( split.erase( std::prev( it ) ) );
            else
                ++it;
        }
        if ( split.empty() && abs.first.empty() )
            split.push_back( "." );
        return join_path( abs.first, join_path( split ) );
    }

    inline std::string distinctPaths( const std::string &prefix, const std::string &path )
    {
        auto prefI = prefix.begin();
        auto pathI = path.begin();
        auto start = pathI;
        bool wasSlash = false;

        for ( ; prefI != prefix.end() && pathI != path.end(); ++prefI, ++pathI ) {

            while ( wasSlash && prefI != prefix.end() && is_path_separator( *prefI ) )
                ++prefI;
            while ( wasSlash && pathI != path.end() && is_path_separator( *pathI ) )
                ++pathI;

            if ( wasSlash ) {
                start = pathI;
                wasSlash = false;
            }

            if ( prefI == prefix.end() ) {
                ++pathI;
                break;
            }

            if ( pathI == path.end() ) {
                ++prefI;
                break;
            }

            if ( *pathI != *prefI )
                break;

            if ( is_path_separator( *prefI ) )
                wasSlash = true;

        }
        while ( wasSlash && prefI != prefix.end() && is_path_separator( *prefI ) )
            ++prefI;
        while ( wasSlash && pathI != path.end() && is_path_separator( *pathI ) )
            ++pathI;

        if ( wasSlash )
            start = pathI;

        if ( prefI == prefix.end() ) {
            if ( pathI != path.end() && is_path_separator( *pathI ) ) {
                while ( pathI != path.end() && is_path_separator( *pathI ) )
                    ++pathI;
                start = pathI;
            }
            else if ( pathI == path.end() )
                start = pathI;
        }
        else if ( prefI != prefix.end() && is_path_separator( *prefI ) && pathI == path.end() ) {
            start = pathI;
        }

        return std::string( start, path.end() );
    }

    inline std::string getcwd()
    {
        std::string buf;
#ifdef _WIN32
        char *buffer;
        if ( ( buffer = _getcwd( NULL, 0 ) ) == NULL )
            brq::raise< system_error >() << "getting the current working directory";

        buf = buffer;
        free( buffer );
#else
        // seems like pathconf returns INT64_MAX on Apple :-/
        size_t size = std::max( pathconf( ".", _PC_PATH_MAX ), 65536L );
        buf.resize( size );
        if ( ::getcwd( &buf.front(), size ) == nullptr )
            brq::raise< system_error >() << "getting the current working directory";
        buf.resize( std::strlen( &buf.front() ) );
#endif
        return buf;
    }

    inline void chdir( std::string dir )
    {
#ifdef _WIN32
        if ( ::_chdir( dir.c_str() ) != 0 )
            brq::raise< system_error >() << "changing directory";
#else
        if ( ::chdir( dir.c_str() ) != 0 )
            brq::raise< system_error >() << "changing directory to " << dir;
#endif
    }

    inline std::string mkdtemp( std::string dirTemplate )
    {
#ifdef _WIN32
        if ( ::_mktemp( &dirTemplate.front() ) == nullptr )
            brq::raise< system_error >() << "creating temporary directory";
#else
        if ( ::mkdtemp( &dirTemplate.front() ) == nullptr )
            brq::raise< system_error >() << "creating temporary directory";
#endif
        return dirTemplate;
    }

#ifndef _WIN32
    inline void touch( std::string f )
    {
        if ( ::utime( f.c_str(), nullptr ) != 0 )
            brq::raise< system_error >() << "touching " << f;
    }
#endif

#ifdef _WIN32
#define stat _stat64
#endif

    inline std::unique_ptr< struct stat > stat( std::string_view pathname )
    {
#if _WIN32
        // from MSDN:
        // If path contains the location of a directory, it cannot contain
        // a trailing backslash. If it does, -1 will be returned and errno
        // will be set to ENOENT.
        pathname = normalize_path( pathname );
#endif
        std::unique_ptr< struct stat > res( new struct stat );
        if ( ::stat( c_str( pathname ), res.get() ) == -1 ) {
            if ( errno == ENOENT )
                return std::unique_ptr< struct stat >();
            else
                brq::raise< system_error >() << "getting file information for " << pathname;
        }
        return res;
    }

#ifndef _WIN32
    inline std::unique_ptr< struct stat > lstat( std::string_view pathname )
    {
        std::unique_ptr< struct stat > res( new struct stat );
        if ( ::lstat( c_str( pathname ), res.get() ) == -1 ) {
            if ( errno == ENOENT )
                return std::unique_ptr< struct stat >();
            else
                brq::raise< system_error >() << "getting file information for " << pathname;
        }
        return res;
    }
#endif

#ifdef _WIN32
    inline void mkdir_if_missing( std::string_view dir, int )
#else
    inline void mkdir_if_missing( std::string_view dir, mode_t mode )
#endif
    {
        for ( int i = 0; i < 5; ++i )
        {
            // If it does not exist, make it
#ifdef _WIN32
            if ( ::_mkdir( c_str( dir ) ) != -1 )
#else
            if ( ::mkdir( c_str( dir ), mode ) != -1 )
#endif
                return;

            // throw on all errors except EEXIST. Note that EEXIST "includes the case
            // where pathname is a symbolic link, dangling or not."
            if ( errno != EEXIST )
                brq::raise< system_error >() << "creating directory " << dir;

            // Ensure that, if dir exists, it is a directory
            auto st = stat( dir );

            if ( !st ) {
                // Either dir has just been deleted, or we hit a dangling
                // symlink.
                //
                // Retry creating a directory: the more we keep failing, the more
                // the likelyhood of a dangling symlink increases.
                //
                // We could lstat here, but it would add yet another case for a
                // race condition if the broken symlink gets deleted between the
                // stat and the lstat.
                continue;
            }
#ifdef _WIN32
            else if ( ( st->st_mode & _S_IFDIR ) == 0 )
#else
            else if ( !S_ISDIR( st->st_mode ) )
#endif
                // If it exists but it is not a directory, complain
                brq::raise() << "ensuring path: " << dir << " exists but it is not a directory";
            else
                // If it exists and it is a directory, we're fine
                return;
        }
        brq::raise() << "ensuring path: " << dir << " exists and looks like a dangling symlink";
    }

    inline void create_dir( std::string_view dir, int mode = 0777 )
    {
        auto abs = absolute_prefix( dir );
        auto split = split_path( abs.second );
        std::vector< std::string_view > todo;
        for ( auto &x : split )
        {
            todo.emplace_back( x );
            mkdir_if_missing( format( abs.first, join_path( todo ) ).data(), mode );
        }
    }

    inline void create_file( std::string_view file, int mode = 0666 )
    {
        auto dir = split_filename( file ).first;
        if ( !dir.empty() )
            create_dir( dir );

        int fd = ::open( c_str( file ), O_CREAT | O_RDONLY, mode );
        if ( fd == -1 )
            raise< system_error >() << "creating file " << file;
        ::close( fd );
    }

#if 0
    struct Fd
    {
        template< typename... Args >
        Fd( Args... args ) : _fd( ::open( args... ) )
        {
            if ( _fd < 0 )
                brq::raise< system_error >() << "while opening file";
        }

        ~Fd() { close(); }

        void close()
        {
            if ( _fd >= 0 )
            {
                ::close( _fd );
                _fd = -1;
            }
        }

        operator int() const { return _fd; }
        int fd() const { return _fd; }

    private:
        int _fd;
    };
#endif

    inline void rename_if_exists( std::string_view src, std::string_view dst )
    {
        int res = ::rename( std::string( src ).c_str(), std::string( dst ).c_str() );
        if ( res < 0 && errno != ENOENT )
            brq::raise< system_error >() << "moving " << src << " to " << dst;
    }

    inline void unlink( std::string fname )
    {
#ifdef _WIN32
        if ( ::_unlink( fname.c_str() ) < 0 )
            brq::raise< system_error >() << "cannot delete file" << fname;
#else
        if ( ::unlink( fname.c_str() ) < 0 )
            brq::raise< system_error >() << "cannot delete file" << fname;
#endif
    }

    inline void symlink( std::string a, std::string b )
    {
        if ( ::symlink( a.c_str(), b.c_str() ) < 0 )
            brq::raise< system_error >() << "cannot create symlink from " << a << " to " << b;
    }

    inline std::string realpath( std::string_view a )
    {
        std::string buf;
        size_t size = std::max( long( pathconf( ".", _PC_PATH_MAX ) ), long( PATH_MAX ) );
        buf.resize( size );

        if ( ::realpath( c_str( a ), &buf.front() ) == nullptr )
            brq::raise< system_error >() << "calling realpath on " << a;

        buf.resize( std::strlen( &buf.front() ) );
        return buf;
    }

    inline void rmdir( std::string dirname ) {
#ifdef _WIN32
        if ( ::_rmdir( dirname.c_str() ) < 0 )
            brq::raise< system_error >() << "cannot delete directory " << dirname;
#else
        if ( ::rmdir( dirname.c_str() ) < 0 )
            brq::raise< system_error >() << "cannot delete directory " << dirname;
#endif
    }

    inline bool deleteIfExists( std::string file )
    {
#ifdef _WIN32
        int r = ::_unlink( file.c_str() );
#else
        int r = ::unlink( file.c_str() );
#endif
        if ( r != 0 )
        {
            if ( errno != ENOENT )
                brq::raise< system_error >() << "cannot delete file" << file;

            return false;
        } else
            return true;
    }
}

/*
 * Declaration of POSIX directory browsing functions and types for Win32.
 *
 * Author:  Kevlin Henney (kevlin@acm.org, kevlin@curbralan.com)
 * History: Created March 1997. Updated June 2003.
 *
 * Copyright Kevlin Henney, 1997, 2003. All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose is hereby granted without fee, provided
 * that this copyright and permissions notice appear in all copies and
 * derivatives.
 *
 * This software is supplied "as is" without express or implied warranty.
 *
 * But that said, if there are any problems please get in touch.
 */

#ifdef _WIN32
extern "C"
{
    struct dirent { char *d_name; };
    struct DIR
    {
        intptr_t            handle; /* -1 for failed rewind */
        struct _finddata_t  info;
        struct dirent       result; /* d_name null iff first time */
        char                *name;  /* null-terminated char string */
    };

    static DIR *opendir( const char *name )
    {
        DIR *dir = 0;

        if ( name && name[ 0 ] )
        {
            size_t base_length = strlen( name );
            const char *all = /* search pattern must end with suitable wildcard */
                strchr( "/\\", name[ base_length - 1 ] ) ? "*" : "/*";

            if ( ( dir = (DIR *)malloc( sizeof *dir ) ) != 0 &&
                 ( dir->name = (char *)malloc( base_length + strlen( all ) + 1 ) ) != 0 )
            {
                strcat( strcpy( dir->name, name ), all );

                if ( ( dir->handle =
                       (intptr_t)_findfirst( dir->name, &dir->info ) ) != -1 )
                {
                    dir->result.d_name = 0;
                }
                else /* rollback */
                {
                    free( dir->name );
                    free( dir );
                    dir = 0;
                }
            }
            else /* rollback */
            {
                free( dir );
                dir = 0;
                errno = ENOMEM;
            }
        }
        else
            errno = EINVAL;

        return dir;
    }

    static int closedir( DIR *dir )
    {
        int result = -1;

        if ( dir )
        {
            if ( dir->handle != -1 )
                result = _findclose( dir->handle );

            free( dir->name );
            free( dir );
        }

        if ( result == -1 ) /* map all errors to EBADF */
            errno = EBADF;

        return result;
    }

    static struct dirent *readdir( DIR *dir )
    {
        struct dirent *result = 0;

        if ( dir && dir->handle != -1 ) {
            if ( !dir->result.d_name || _findnext( dir->handle, &dir->info ) != -1 ) {
                result = &dir->result;
                result->d_name = dir->info.name;
            }
        }
        else
            errno = EBADF;

        return result;
    }

    static void rewinddir( DIR *dir )
    {
        if ( dir && dir->handle != -1 )
        {
            _findclose( dir->handle );
            dir->handle = (intptr_t)_findfirst( dir->name, &dir->info );
            dir->result.d_name = 0;
        }
        else
            errno = EBADF;
    }

}
#endif

namespace brq
{

    template< typename DirPre, typename DirPost, typename File >
    void traverse_dir_tree( std::string root, DirPre pre, DirPost post, File file, bool follow = true )
    {
        if ( pre( root ) )
        {
            using closedir_t = int (*)( DIR * );
            auto dir = std::unique_ptr< DIR, closedir_t >( ::opendir( root.c_str() ), &::closedir );
            if ( dir == nullptr )
                brq::raise< system_error >() << "opening directory " << root;

            for ( auto de = readdir( dir.get() ); de != nullptr; de = readdir( dir.get() ) )
            {
                std::string name = de->d_name;
                if ( name == "." || name == ".." )
                    continue;

                auto path = join_path( root, name );
                auto st = follow ? stat( path ) : lstat( path );
#ifdef _WIN32
                if ( st && ( st->st_mode & _S_IFDIR ) )
#else
                if ( st && S_ISDIR( st->st_mode ) )
#endif
                    traverse_dir_tree( path, pre, post, file, follow );
                else
                    file( path );
            }

            post( root );
        }
    }

    template< typename Dir, typename File >
    void traverse_dir( std::string root, Dir dir_, File file )
    {
        auto dir = [&]( std::string d ) -> bool
        {
            if ( d == root )
                return true;
            else
                dir_( d );
            return false;
        };

        traverse_dir_tree( root, dir, []( std::string ) {}, file );
    }

    template< typename File >
    void traverse_files( std::string dir, File file )
    {
        traverse_dir( dir, []( std::string ) {}, file );
    }

    inline void rmtree( std::string dir )
    {
        if ( auto s = stat( dir ); s && S_ISDIR( s->st_mode ) )
            traverse_dir_tree( dir, []( std::string ) { return true; },
                                    []( std::string p ) { if ( p != "." ) rmdir( p ); },
                                    unlink, false );
        else if ( s )
            unlink( dir ); /* I guess? */
    }

    struct change_dir
    {
        change_dir( std::string newcwd ) : _oldcwd( getcwd() ), _newcwd( newcwd )
        {
            if ( !newcwd.empty() )
                chdir( newcwd );
        }

        ~change_dir()
        {
            chdir( _oldcwd );
        }

        const std::string _oldcwd, _newcwd;
    };

    struct with_dir
    {
        change_dir _ch;
        with_dir( std::string dir, int mode = 0777 ) : _ch( ( create_dir( dir, mode ), dir ) ) {}
        void rmdir()
        {
            chdir( _ch._oldcwd );
            brq::rmdir( _ch._newcwd );
        }
    };

#if defined( __unix__ ) || defined( __divine__ )
    inline std::string tempDir() {
        auto *tmpdir = std::getenv( "TMPDIR" );
        if ( tmpdir )
            return tmpdir;
        return "/tmp";
    }
#else
    std::string tempDir();
#warning unimplemented brick::fs::tempDir
#endif

    enum class AutoDelete : bool { No = false, Yes = true };
    enum class UseSystemTemp : bool { No = false, Yes = true };

    struct TempDir {
        explicit TempDir( std::string nameTemplate, AutoDelete autoDelete = AutoDelete::Yes,
                          UseSystemTemp useSystemTemp = UseSystemTemp::No ) :
            path( mkdtemp( _getPath( nameTemplate, useSystemTemp ) ) ), _autoDelete( autoDelete )
        { }
        TempDir( const TempDir & ) = delete;
        TempDir( TempDir &&o ) : path( std::move( o.path ) ), _autoDelete( o._autoDelete ) {
            o._autoDelete = AutoDelete::No;
        }

        operator std::string() const { return path; }

        ~TempDir() {
            if ( _autoDelete == AutoDelete::Yes )
                rmtree( path );
        }

        const std::string path;
    private:
        AutoDelete _autoDelete;

        static std::string _getPath( std::string nameTemplate, UseSystemTemp useTmp ) {
            if ( useTmp == UseSystemTemp::No || is_absolute( nameTemplate ) )
                return nameTemplate;
            return join_path( tempDir(), nameTemplate );
        }
    };

    namespace {

        std::string read_file( std::ifstream &in, size_t length = std::numeric_limits< size_t >::max() )
        {
            if ( !in.is_open() )
                brq::raise() << "reading filestream";

            in.seekg( 0, std::ios::end );
            length = std::min< size_t >( length, in.tellg() );
            in.seekg( 0, std::ios::beg );

            std::string buffer;
            buffer.resize( length );

            in.read( &buffer[ 0 ], length );
            return buffer;
        }

        std::string read_file( std::istream &in )
        {
            std::string out;
            int pos = 0;

            while ( in )
            {
                out.resize( pos + 1024 );
                in.read( out.data() + pos, 1024 );
                out.resize( pos += in.gcount() );
            }

            return out;
        }

        std::string read_file( std::string_view file,
                               size_t length = std::numeric_limits< size_t >::max() )
        {
            std::ifstream in( c_str( file ), std::ios::binary );
            if ( !in.is_open() )
                brq::raise() << "reading file " << file;
            return read_file( in, length );
        }

        std::string read_file_or( std::string_view file, std::string_view def,
                                  size_t length = std::numeric_limits< size_t >::max() )
        {
            std::ifstream in( c_str( file ), std::ios::binary );
            if ( !in.is_open() )
                return std::string( def );
            return read_file( in, length );
        }

        void write_file( std::ofstream &out, std::string_view s )
        {
            if ( !out.is_open() )
                brq::raise() << "writing filestream";
            out.write( s.data(), s.size() );
        }

        void write_file( std::string_view file, std::string_view data )
        {
            std::ofstream out( std::string( file ), std::ios::binary );
            if ( !out.is_open() )
                brq::raise< system_error >() << "writing file " << file;
            out << data;
            if ( !out.good() )
                brq::raise< system_error >() << "writing data to file " << file;
        }
    }

#ifdef _WIN32
#define F_OK 0
#define W_OK 2
#define R_OK 4
//#define X_OK
#endif


    inline bool file_access( std::string_view sv, int m )
    {
        std::string s( sv );
#ifdef _WIN32
        return ::_access( s.c_str(), m ) == 0;
#else
        return ::access( s.c_str(), m ) == 0;
#endif
    }

    inline bool file_exists( std::string_view file )
    {
        return file_access( file, F_OK );
    }

}

namespace brq::t_fs
{
    using vs = std::vector< std::string_view >;

    struct TestSplit
    {
        TEST( path )
        {
            ASSERT( (vs{ "a", "b", "c" }) == split_path( "a/b/c" ) );
            ASSERT( (vs{ "/", "a", "b", "c" }) == split_path( "/a/b/c" ) );
        }
    };

    struct TestNormalize
    {
        TEST( basic )
        {
            ASSERT_EQ( "a/b/c", normalize_path( "a/b/c" ) );
            ASSERT_EQ( "a/b/c", normalize_path( "a//b/c" ) );
            ASSERT_EQ( "a/b/c", normalize_path( "a/b//c" ) );
            ASSERT_EQ( "a/b/c", normalize_path( "a//b//c" ) );
            ASSERT_EQ( "/a/b/c", normalize_path( "/a/b/c" ) );
            ASSERT_EQ( "/a/b/c", normalize_path( "/a//b/c" ) );
            ASSERT_EQ( "/a/b/c", normalize_path( "//a/b/c" ) );
            ASSERT_EQ( "/a/b/c", normalize_path( "/a/b//c" ) );
            ASSERT_EQ( "/a/b/c", normalize_path( "//a/b//c" ) );
        }

        TEST( endbackslash ) {
            ASSERT_EQ( "a/b/c", normalize_path( "a/b/c/" ) );
            ASSERT_EQ( "/a/b/c", normalize_path( "/a/b/c/" ) );
        }

        TEST( dot ) {
            ASSERT_EQ( "a/b/c", normalize_path( "a/./b/./c" ) );
            ASSERT_EQ( "a/b/c", normalize_path( "a/./b/././c" ) );
            ASSERT_EQ( "a/b/c", normalize_path( "./a/./b/././c" ) );
        }

        TEST( dotdot ) {
            ASSERT_EQ( "a/b/c", normalize_path( "a/b/c/d/.." ) );
            ASSERT_EQ( "a/b", normalize_path( "a/b/c/d/../.." ) );
            ASSERT_EQ( "a/b/c", normalize_path( "a/b/c/d/../../c" ) );
            ASSERT_EQ( "../a", normalize_path( "../a" ) );
            ASSERT_EQ( "a/b/c", normalize_path( "a/b/./../b/c" ) );
        }

        TEST( empty )
        {
            ASSERT_EQ( ".", normalize_path( "./" ) );
            ASSERT_EQ( ".", normalize_path( "a/.." ) );
            ASSERT_EQ( "/", normalize_path( "/." ) );
            ASSERT_EQ( "/", normalize_path( "/a/.." ) );
        }

        TEST( negative )
        {
            ASSERT_EQ( "..", normalize_path( ".." ) );
            ASSERT_EQ( "../..", normalize_path( "../.." ) );
            ASSERT_EQ( "../../..", normalize_path( "../../.." ) );
            ASSERT_EQ( "../../..", normalize_path( "../../a/../.." ) );
        }
    };

    struct Text_extension
    {
        TEST( take )
        {
            ASSERT_EQ( ".b", take_extension( "a.b" ) );
            ASSERT_EQ( ".c", take_extension( "a.b.c" ) );
        }
    };

#ifdef __unix__
    struct Testposix_buf
    {
        TEST(read)
        {
            int fd = open( "/dev/zero", O_RDWR );
            ASSERT( fd != -1 );

            posix_buf buf( fd );
            std::istream is( &buf );
            ASSERT( !is.eof() );

            char c;
            is >> c;
            ASSERT( !is.eof() );
            ASSERT_EQ( c, 0 );
        }

        TEST(read_rand)
        {
            int fd = open( "/dev/random", O_RDONLY );
            ASSERT( fd != -1 );

            posix_buf buf( fd );
            std::istream is( &buf );
            ASSERT( !is.eof() );

            char c = 0;
            while ( c == 0 )
                is >> c;
            ASSERT( c != 0 );
            ASSERT( !is.eof() );
        }

        TEST(pipe)
        {
            int fds[2];
            ::pipe( fds );
            posix_buf read( fds[0] ), write( fds[1] );
            std::istream is( &read );
            std::ostream os( &write );
            os << "hello world" << std::endl;
            std::string str;
            is >> str;
            ASSERT_EQ( str, "hello" );
            is >> str;
            ASSERT_EQ( str, "world" );
        }

        TEST(write)
        {
            int fd = open( "/dev/null", O_WRONLY );
            ASSERT( fd != -1 );

            posix_buf buf( fd );
            std::ostream os( &buf );

            os << "Foo";
            os << "Bar";
            os << std::endl;
        }
    };
#endif

}

#if 0
inline std::pair< std::string, std::string > split_extension( std::string path );
inline std::string replace_extension( std::string path, std::string extension );
inline std::pair< std::string, std::string > split_filename( std::string path );
inline std::pair< std::string, std::string > absolute_prefix( std::string path );
#endif

// vim: syntax=cpp tabstop=4 shiftwidth=4 expandtab ft=cpp
