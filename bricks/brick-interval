// -*- mode: C++; indent-tabs-mode: nil; c-basic-offset: 4 -*-

/*
 * (c) 2020 Henrich Lauko <xlauko@mail.muni.cz>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#pragma once

#include "brick-assert"
#include "brick-order"
#include "brick-tristate"

#include <limits>
#include <type_traits>

namespace brq
{
    void integer_fault( const char *msg )
    {
        #ifdef __divine__
            __dios_fault( _VM_Fault::_VM_F_Integer, msg );
        #else
            throw std::runtime_error( msg );
        #endif
    }

    template< typename underlying_t >
    struct bound : brq::derive_ord
    {
        using value_t = underlying_t;

        static_assert( std::is_integral_v< underlying_t > );
        static_assert( std::is_signed_v< underlying_t > );

        value_t _value = 0;

        constexpr bound() = default;
        constexpr bound( value_t value ) : _value( value ) {}

        constexpr bound( const bound &o ) = default;
        constexpr bound( bound &&o ) = default;

        constexpr bound &operator=(const bound &o) {
            if ( this != &o )
                _value = o._value;
            return *this;
        }

        constexpr bound &operator=(bound &&o) {
            if ( this != &o )
                _value = std::move( o._value );
            return *this;
        }

        static constexpr value_t max() { return std::numeric_limits< value_t >::max(); }
        static constexpr value_t min() { return std::numeric_limits< value_t >::min(); }

        static constexpr bound plus_infinity()  { return max(); }
        static constexpr bound minus_infinity() { return min(); }

        constexpr bool is_infinite() const
        {
            return _value == min() || _value == max();
        }
        constexpr bool is_finite() const { return !is_infinite(); }

        enum overflow { none = 0, plus = 1, minus = 2 };

        constexpr void increment()
        {
            static_assert( std::is_integral_v< value_t > );
            ++_value;
        }

        constexpr void decrement()
        {
            static_assert( std::is_integral_v< value_t > );
            --_value;
        }

        constexpr bound operator-() const
        {
            if ( _value == minus_infinity() )
                return plus_infinity();
            if ( _value == plus_infinity() )
                return minus_infinity();
            return -_value;
        }

        constexpr bound& operator+=( const bound &o )
        {
            auto overflows = [] ( auto a, auto b ) {
                if ( b > 0 )
                    return b >= max() - a ? overflow::plus : overflow::none;
                if ( a < 0 )
                    return b <= min() - a ? overflow::minus : overflow::none;
                return overflow::none;
            };

            if ( is_finite() && o.is_finite() ) {
                if ( auto ov = overflows( _value, o._value ); ov )
                    _value = ( ov == overflow::plus ) ? max() : min();
                else
                    _value += o._value;
            } else if ( is_finite() && o.is_infinite() ) {
                _value = o._value;
            } else if ( is_infinite() && o.is_finite() ) {
                // keep infinite value
            } else if ( o.is_infinite() && _value != o._value ) {
                integer_fault( "addition of opposite infinities is undetermined" );
            }
            return *this;
        }

        constexpr bound& operator-=( const bound &o )
        {
            *this += -o;
            return *this;
        }

        constexpr bound& operator*=( const bound &o )
        {
            auto overflows = [] ( auto a, auto b ) {
                if ( a < 0 )
                    if ( b < 0 && -a > max() / -b )
                        return overflow::plus;
                    if ( b > 0 && a < min() / b )
                        return overflow::minus;
                if ( a > 0 )
                    if ( b < 0 && b < min() / a )
                        return overflow::minus;
                    if ( b > 0 && a > max() / b )
                        return overflow::plus;
                return overflow::none;
            };

            if ( o._value == 0 ) {
                _value = 0;
            } else if ( _value == 0 ) {
                // keep zero
            } else {
                if ( is_finite() && o.is_finite() )
                    if ( auto ov = overflows( _value, o._value ); ov )
                        _value = ( ov == overflow::plus ) ? max() : min();
                    else
                        _value *= o._value;
                else // is_infinite() || o.is_infinite()
                    _value = ( _value > 0 ) ^ ( o._value > 0 ) ? min() : max();
            }
            return *this;
        }

        constexpr bound& operator/=( const bound &o )
        {
            if ( is_finite() && o.is_finite() ) {
                _value /= o._value;
            } else if ( is_finite() && o.is_infinite() ) {
                _value = 0;
            } else if ( is_infinite() && o.is_finite() ) {
                if ( o._value < 0 )
                    *this = -(*this);
            } else {
                integer_fault( "division of infinities is undetermined" );
            }

            return *this;
        }

        constexpr bound& operator%=( const bound &o )
        {
            if ( is_finite() && o.is_finite() ) {
                _value %= o._value;
            } else {
                integer_fault( "reminder division with infinities is undetermined" );
            }
            return *this;
        }

        friend constexpr bound operator+( bound l, bound r )   { return l += r; }
        friend constexpr bound operator+( value_t l, bound r ) { return bound( l ) += r; }
        friend constexpr bound operator+( bound l, value_t r ) { return l += bound( r ); }

        friend constexpr bound operator-( bound l, bound r )   { return l -= r; }
        friend constexpr bound operator-( value_t l, bound r ) { return bound( l ) -= r; }
        friend constexpr bound operator-( bound l, value_t r ) { return l -= bound( r ); }

        friend constexpr bound operator*( bound l, bound r )   { return l *= r; }
        friend constexpr bound operator*( value_t l, bound r ) { return bound( l ) *= r; }
        friend constexpr bound operator*( bound l, value_t r ) { return l *= bound( r ); }

        friend constexpr bound operator/( bound l, bound r )   { return l /= r; }
        friend constexpr bound operator/( value_t l, bound r ) { return bound( l ) /= r; }
        friend constexpr bound operator/( bound l, value_t r ) { return l /= bound( r ); }

        friend constexpr bound operator%( bound l, bound r )   { return l %= r; }
        friend constexpr bound operator%( value_t l, bound r ) { return bound( l ) %= r; }
        friend constexpr bound operator%( bound l, value_t r ) { return l %= bound( r ); }

        friend constexpr bool operator< ( bound l, bound r ) { return l._value < r._value; }
        friend constexpr bool operator==( bound l, bound r ) { return l._value == r._value; }
    };

    template< typename bound_t >
    struct interval
    {
        bound_t low;
        bound_t high;

        template< typename T >
        constexpr interval( const T &low, const T &high )
            : low( low ), high( high )
        {}

        template< typename T >
        constexpr interval( const std::pair< T, T > &p )
            : low( p.first ), high( p.second )
        {}

        template< typename T >
        constexpr interval( const interval< T > &i )
            : low( i.low ), high( i.high )
        {}

        template< typename T >
        constexpr interval( interval< T > &&i )
            : low( std::move( i.low ) ), high( std::move( i.high ) )
        {}

        constexpr interval( tristate t )
        {
            if ( maybe( t ) )
            {
                low = false;
                high = true;
            }
            else
            {
                low = high = static_cast< bool >( t );
            }
        }

        constexpr interval() = default;

        constexpr bool constant() const { return low == high; }

        constexpr bool empty() const { return high < low; }

        constexpr bool includes( const bound_t &b ) const
        {
            return low <= b && b <= high;
        }

        constexpr bool includes( const interval &i ) const
        {
            return high >= i.high && low <= i.low;
        }

        constexpr bool excludes( const bound_t &b ) const
        {
            return b < low || b > high;
        }

        constexpr bool excludes( const interval &i ) const
        {
            return i.high < low || high < i.low;
        }

        explicit inline operator tristate() const noexcept
        {
            if ( low == 0 && high == 0 )
                return tristate( false );
            if ( includes( 0 ) )
                return tristate( maybe );
            return tristate( true );
        }

        constexpr void intersect( const interval &i )
        {
            *this = meet( *this, i );
        }

        friend constexpr interval meet( const interval &l, const interval &r ) // intersection
        {
            return { std::max( l.low, r.low ), std::min( l.high, r.high ) };
        }

        friend constexpr interval join( const interval &l, const interval &r ) // union
        {
            return { std::min( l.low, r.low ), std::max( l.high, r.high ) };
        }

        friend constexpr interval operator+( const interval &l, const interval &r )
        {
            return { l.low + r.low, l.high + r.high };
        }

        friend constexpr interval operator-( const interval &l, const interval &r )
        {
            return { l.low - r.high, l.high - r.low };
        }

        friend constexpr interval operator*( const interval &l, const interval &r )
        {
            return std::minmax( std::initializer_list< bound_t >{
                l.low  * r.low,
                l.low  * r.high,
                l.high * r.low,
                l.high * r.high
            } );
        }

        friend constexpr interval operator/( const interval &l, const interval &r )
        {
            if ( r.includes( 0 ) )
                integer_fault( "division by zero" );
            return std::minmax( std::initializer_list< bound_t >{
                l.low  / r.low,
                l.low  / r.high,
                l.high / r.low,
                l.high / r.high
            } );
        }

        friend constexpr interval operator%( const interval &l, const interval &r )
        {
            if ( r.includes( 0 ) )
                integer_fault( "division by zero" );
            return std::minmax( std::initializer_list< bound_t >{
                l.low  % r.low,
                l.low  % r.high,
                l.high % r.low,
                l.high % r.high
            } );
        }

        friend constexpr interval operator>>( const interval &l, const interval &r )
        {
            return std::minmax( std::initializer_list< bound_t >{
                l.low  >> r.low,
                l.low  >> r.high,
                l.high >> r.low,
                l.high >> r.high
            } );
        }

        friend constexpr interval operator<<( const interval &l, const interval &r )
        {
            return std::minmax( std::initializer_list< bound_t >{
                l.low  << r.low,
                l.low  << r.high,
                l.high << r.low,
                l.high << r.high
            } );
        }

        friend constexpr tristate operator==( const interval &l , const interval &r )
        {
            if ( l.low == r.low && l.high == r.high )
                return tristate( true );
            return l.includes( r ) ? maybe :tristate( false );
        }

        friend constexpr tristate operator==( const interval &l , tristate r )
        {
            return l == interval( r );
        }

        friend constexpr tristate operator==( tristate l , const interval &r )
        {
            return interval( l ) == r;
        }

        friend constexpr tristate operator!=( const interval &l , const interval &r )
        {
            return !( l == r );
        }

        friend constexpr tristate operator<( const interval &l, const interval &r )
        {
            if ( l.high < r.low )
                return tristate( true );
            if ( l.low > r.high )
                return tristate( false );
            return maybe;
        }

        friend constexpr tristate operator>( const interval &l, const interval &r )
        {
            if ( l.low > r.high )
                return tristate( true );
            if ( l.high > r.low )
                return tristate( false );
            return maybe;
        }

        friend constexpr tristate operator<=( const interval &l, const interval &r )
        {
            return !( l > r );
        }

        friend constexpr tristate operator>=( const interval &l, const interval &r )
        {
            return !( l < r );
        }

        template< typename stream >
        friend stream& operator<<( stream &os, const interval &t )
        {
            return os << '[' << t.low << ", " << t.high << ']';
        }
    };

    template< typename bound_t >
    constexpr interval< bound_t > make_interval()
    {
        return interval< bound_t >();
    }

    template< typename bound_t >
    constexpr interval< bound_t > make_interval( const bound_t &b )
    {
        return interval< bound_t >( b, b );
    }

    template< typename bound_t >
    interval( bound_t, bound_t ) -> interval< bound_t >;

    template< typename bound_t >
    interval( const std::pair< bound_t, bound_t > & ) -> interval< bound_t >;
}

namespace t_brq
{
    using bound = brq::bound< int >;

    static_assert( bound( 10 ) + bound( 5 ) == 15 );
    static_assert( bound( 7 ) - bound( 3 ) == 4 );
    static_assert( bound( 3 ) - bound( 3 ) == 0 );

    static_assert( bound::plus_infinity() + 1  == bound::plus_infinity() );
    static_assert( bound::plus_infinity() - 1  == bound::plus_infinity() );
    static_assert( bound::minus_infinity() + 1 == bound::minus_infinity() );
    static_assert( bound::minus_infinity() - 1 == bound::minus_infinity() );

    static_assert( bound::plus_infinity() + bound::plus_infinity() == bound::plus_infinity() );
    static_assert( bound::minus_infinity() + bound::minus_infinity() == bound::minus_infinity() );

    static_assert( bound::plus_infinity() * bound::plus_infinity() == bound::plus_infinity() );
    static_assert( bound::plus_infinity() * bound::minus_infinity() == bound::minus_infinity() );
    static_assert( bound::minus_infinity() * bound::plus_infinity() == bound::minus_infinity() );

    static_assert( bound::plus_infinity() * -1 == bound::minus_infinity() );
    static_assert( bound::minus_infinity() * -1 == bound::plus_infinity() );

    static_assert( 0 * bound::plus_infinity() == 0 );
    static_assert( 0 * bound::minus_infinity() == 0 );

    static_assert( bound::plus_infinity() / -1 == bound::minus_infinity() );
    static_assert( bound::minus_infinity() / -1 == bound::plus_infinity() );

    static_assert( bound::plus_infinity() / 10 == bound::plus_infinity() );
    static_assert( bound::minus_infinity() / 10 == bound::minus_infinity() );

    static_assert( -1 / bound::plus_infinity() == 0 );
    static_assert(  1 / bound::minus_infinity() == 0 );
}

// vim: syntax=cpp tabstop=4 shiftwidth=4 expandtab ft=cpp