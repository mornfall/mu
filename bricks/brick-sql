// -*- mode: C++; indent-tabs-mode: nil; c-basic-offset: 4 -*-

/*
 * Copyright (C) 2019 Petr Rockai <code@fixp.eu>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#pragma once
#include "brick-assert"
#include "brick-cons"
#include "brick-except"

#include <unordered_map>
#include <vector>
#include <typeindex>
#include <cxxabi.h>
#include <codecvt>

#include <libpq-fe.h>

namespace brq::sql
{
    struct error : std::runtime_error
    {
        using std::runtime_error::runtime_error;
    };

    struct date { std::int16_t year, month, day; };
    struct time { std::int16_t hour, min, sec; };
    struct timestamp { std::int64_t year, month, day, hour, min, sec, fract; };

    static std::unordered_map< std::type_index, std::string_view > type_map
    {
        { typeid( int ),            "integer" },
        { typeid( long ),           "bigint" },
        { typeid( std::u32string ), "text" },
        { typeid( std::string ),    "bytea" },
        { typeid( date ),           "date" },
        { typeid( time ),           "time" },
        { typeid( timestamp ),      "timestamp" },
    };

    template< typename T >
    std::string_view get_name( T t )
    {
        static std::string name;
        if ( name.empty() )
        {
            int stat;
            char *dem = abi::__cxa_demangle( typeid( T ).name(), nullptr, nullptr, &stat );
            name = strchr( dem, ':' ) ? strrchr( dem, ':' ) + 1 : dem;
            TRACE( dem, "â†’", name );
            std::free( dem );
        }
        return name;
    }

    template< typename T, bool _nullable = false >
    struct column
    {
        template< typename CT >
        static std::string_view column_name( const CT &ct ) { return get_name( ct ); }

        using type = T;
        static constexpr bool nullable = _nullable;
        static constexpr bool primary = false;
        static constexpr bool foreign = false;
    };

    template< typename tab, typename col, bool _nullable = false >
    struct foreign_key : col
    {
        using column = col;
        using table = tab;
        static constexpr bool nullable = _nullable;
        static constexpr bool foreign = true;
    };

    template< typename col >
    struct primary_key
    {
        template< typename CT >
        static std::string_view column_name( const CT & ) { return get_name( col() ); }

        using type = typename col::type;
        static constexpr bool nullable = col::nullable;
        static constexpr bool primary = true;
        static constexpr bool foreign = false;
    };

    template< typename... cols >
    struct table
    {
        using columns = brq::cons_list_t< cols... >;
    };

    template< typename stream, typename table >
    auto operator<<( stream &s, table ) -> decltype( typename table::columns(), s << "" )
    {
        s << "create table " << get_name( table() );
        bool first = true;
        auto print_col = [&]( auto col )
        {
            using col_t = decltype( col );
            s << ( first ? "\n  ( " : "\n  , " ) << col.column_name( col );
            if ( col.primary )
                s << " serial primary key";
            else
                s << " " << brq::sql::type_map[ typeid( typename col_t::type ) ];
            if constexpr ( col.foreign )
                s << " references " << get_name( typename col_t::table() )
                  << "( " << typename col_t::column().column_name( typename col_t::column() ) << " )";
            if ( !col.nullable )
                s << " not null";
            first = false;
        };
        typename table::columns().each( print_col );
        return s << " )";
    }

    template< typename... tables_ >
    struct schema : cons_list_t< tables_... > {};

    struct txn;

    struct conn
    {
        PGconn *_handle = nullptr;
        PGconn *handle() { return _handle; }

        const char *errmsg() { return PQerrorMessage( _handle ); }

        conn( std::string s )
        {
            if ( !( _handle = PQconnectdb( s.c_str() ) ) )
                throw std::bad_alloc();
            if ( PQstatus( _handle ) != CONNECTION_OK )
                raise< error >() << "connecting to " << s << " " << errmsg();
        }

        ~conn()
        {
            PQfinish( _handle );
        }

        txn begin();
    };

    template< typename... cols >
    struct row
    {
        using columns_t = brq::cons_list_t< cols... >;
        using values_t  = brq::cons_list_t< typename cols::type... >;
        values_t _values;

        // row() = default;
        row( typename cols::type... v ): _values( v... ) {}

        template< typename col, typename cs_t, typename vs_t >
        auto &get( vs_t &vs )
        {
            if constexpr ( std::is_same_v< col, typename cs_t::car_t > )
                             return vs.car;
            else
                return get< col, typename cs_t::cdr_t >( vs.cdr );
        }

        template< typename col >
        auto &get() { return get< col, columns_t >( _values ); }
    };

    template< typename... cols >
    struct stmt
    {
        using result_t = row< cols... >;

        conn &_conn;
        std::string _txt;

        std::vector< std::string > _memory;
        std::vector< const char * > _params;
        std::vector< int > _lengths;
        PGresult *_result = nullptr;

        template< typename T > char* untyped( T *v ) { return reinterpret_cast< char * >( v ); }

        template< typename T >
        void bind_raw( T &t )
        {
            _lengths.push_back( sizeof( t ) );
            _params.push_back( untyped( &t ) );
        }

        void bind_one( int32_t &t ) { t = htonl( t ); bind_raw( t ); }
        void bind_one( int16_t &t ) { t = htons( t ); bind_raw( t ); }
        void bind_one( std::u32string &us )
        {
            std::wstring_convert< std::codecvt_utf8< char32_t >, char32_t > conv;
            _memory.emplace_back( conv.to_bytes( &*us.begin(), &*us.end() ) );
            _lengths.push_back( _memory.back().size() );
            _params.push_back( _memory.back().data() );
            TRACE( _params.back() );
        }

        int bind_one( const std::string &s )
        {
            _lengths.push_back( s.size() );
            _params.push_back( s.data() );
        }

        stmt &exec()
        {
            std::vector< int > formats( _params.size(), 1 );

            _result = PQexecParams( _conn.handle(), _txt.c_str(), _params.size(), nullptr,
                                    _params.data(), _lengths.data(), formats.data(), 1 );

            auto r = PQresultStatus( _result );
            if ( r != PGRES_COMMAND_OK && r != PGRES_TUPLES_OK )
                raise< error >() << "executing " << _txt << ": " << _conn.errmsg();

            return *this;
        }

        template< typename... args >
        stmt &bind( const args &... vs )
        {
            auto list = cons_list( vs... );
            _params.reserve( sizeof...( vs ) );
            _memory.reserve( sizeof...( vs ) );

            list.each( [&]( auto &v ) { bind_one( v ); } );
            return *this;
        }

        stmt( conn &c, const std::string &s ) : _conn( c ), _txt( s )
        {
            TRACE( "stmt(", s, ")" );
        }
    };

    template< typename select, typename tab >
    struct select_join
    {
        template< typename stream >
        friend auto operator<<( stream &s, select_join ) -> decltype( s << "" )
        {
            return s << select() << " join " << name( tab() ) << " on " << "? = ?";
        }
    };

    template< typename cols, typename tab, typename stmt >
    struct select_tab
    {
        conn &_conn;
        select_tab( conn &c ) : _conn( c ) {}

        template< typename stream >
        friend auto operator<<( stream &s, const select_tab &st ) -> decltype( s << "" )
        {
            return s << cols( st._conn ) << " from " << get_name( tab() );
        }

        template< typename table >
        select_join< select_tab, table > join() { return { _conn }; }

        stmt exec()
        {
            string_builder bld;
            bld << *this;
            stmt s( _conn, bld.buffer() );
            s.exec();
            return s;
        }
    };

    template< typename... cols >
    struct select_cols
    {
        conn &_conn;
        select_cols( conn &c ) : _conn( c ) {}

        template< typename table >
        select_tab< select_cols< cols... >, table, stmt< cols... > > from() { return { _conn }; }

        template< typename stream >
        friend auto operator<<( stream &s, select_cols ) -> decltype( s << "" )
        {
            s << "select ";
            bool first = true;
            cons_list( cols()... ).each( [&]( auto c )
            {
                s << ( first ? "" : ", " ) << c.column_name( c ); first = false;
            } );
            return s;
        }
    };

    template< typename table >
    struct insert
    {
        conn &_conn;
        insert( conn &c ) : _conn( c ) {}

        template< typename... cols >
        stmt< cols... > values( const typename cols::type &... v )
        {
            string_builder bld;
            bld << "insert into " << get_name( table() );
            cons_list_t< cols... > l;
            bool first = true;
            l.each( [&]( auto &col )
            {
                bld << ( first ? " ( " : ", " ) << col.column_name( col ); first = false;
            } );
            bld << " ) values ";
            int i = 1;
            l.each( [&]( auto ) { bld << ( i == 1 ? " ( " : ", " ) << "$" << i; i ++; } );
            bld << " )";
            stmt< cols... > s( _conn, bld.buffer() );
            s.bind( v... );
            return s;
        }
    };

    struct txn
    {
        conn &_conn;
        bool _closed = false;

        explicit txn( conn &conn ) : _conn( conn )
        {
            exec( "begin transaction" );
        }
        txn( txn&& rhs ) noexcept;

        txn() = delete;
        txn& operator=( const txn &rhs ) = delete;

        txn &commit()
        {
            ASSERT( !_closed );
            exec( "commit transaction" );
            _closed = true;
            return *this;
        }

        txn &rollback() noexcept
        {
            ASSERT( !_closed );
            exec( "rollback transaction" );
            _closed = true;
            return *this;
        }

        txn &exec( std::string q )
        {
            stmt<> s( _conn, q );
            s.exec();
            return *this;
        }

        template< typename schema >
        txn &initdb( schema s )
        {
            s.each( [&]( auto t )
                    {
                        string_builder bld;
                        bld << t;
                        exec( bld.buffer() );
                    } );
            return *this;
        }

        template< typename... args >
        select_cols< args... > select() { return { _conn }; }

        template< typename table >
        insert< table> insert_into() { return { _conn }; }

        ~txn() noexcept { if ( !_closed ) rollback(); }
    };

    txn conn::begin() { return txn( *this ); }

}

namespace brq
{
    using sql_connection = sql::conn;
    using sql_error      = sql::error;
}
