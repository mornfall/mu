// -*- mode: C++; indent-tabs-mode: nil; c-basic-offset: 4 -*-

/*
 * Copyright (C) 2019 Petr Rockai <code@fixp.eu>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#pragma once
#include "brick-assert"
#include "brick-cons"
#include "brick-except"

#include <unordered_map>
#include <vector>
#include <typeindex>
#include <cxxabi.h>
#include <codecvt>

#include <libpq-fe.h>

namespace brq::sql
{
    struct error : std::runtime_error
    {
        using std::runtime_error::runtime_error;
    };

    struct date { std::int16_t year, month, day; };
    struct time { std::int16_t hour, min, sec; };
    struct timestamp { std::int64_t year, month, day, hour, min, sec, fract; };

    static std::unordered_map< std::type_index, std::string_view > type_map
    {
        { typeid( int ),            "integer" },
        { typeid( long ),           "bigint" },
        { typeid( std::u32string ), "text" },
        { typeid( std::string ),    "bytea" },
        { typeid( date ),           "date" },
        { typeid( time ),           "time" },
        { typeid( timestamp ),      "timestamp" },
    };

    template< typename T >
    std::string_view get_name( T t )
    {
        static std::string name;
        if ( name.empty() )
        {
            int stat;
            char *dem = abi::__cxa_demangle( typeid( T ).name(), nullptr, nullptr, &stat );
            name = strchr( dem, ':' ) ? strrchr( dem, ':' ) + 1 : dem;
            TRACE( dem, "â†’", name );
            std::free( dem );
        }
        return name;
    }

    template< typename T, bool _nullable = false >
    struct column
    {
        template< typename CT >
        static std::string_view column_name( const CT &ct ) { return get_name( ct ); }

        using type = T;
        static constexpr bool is_nullable = _nullable;
        static constexpr bool is_primary = false;
        static constexpr bool is_foreign = false;
        static constexpr bool is_constraint = false;
    };

    template< typename tab, typename col, bool _nullable = false >
    struct foreign_key : col
    {
        using column = col;
        using table = tab;
        static constexpr bool is_nullable = _nullable;
        static constexpr bool is_foreign = true;
    };

    template< typename col >
    struct primary_key : col
    {
        template< typename CT >
        static std::string_view column_name( const CT & ) { return get_name( col() ); }

        static constexpr bool is_primary = true;
    };

    template< typename... cols >
    struct unique
    {
        using columns = cons_list_t< cols... >;
        static constexpr bool is_constraint = true;
        static constexpr bool is_table = false;
    };

    template< typename T >
    struct not_constraint { static constexpr bool value = !T::is_constraint; };

    template< typename... cols >
    struct table
    {
        using all = cons_list_t< cols... >;
        using columns = decltype( all().template filter< not_constraint >() );
        static constexpr bool is_table = true;
    };

    template< typename stream, typename table >
    auto operator<<( stream &s, table ) -> std::enable_if_t< table::is_table, decltype( s << "" ) >
    {
        s << "create table " << get_name( table() );
        bool first = true;
        auto print_col = [&]( auto col )
        {
            using col_t = decltype( col );
            s << ( first ? "\n  ( " : "\n  , " );
            if constexpr ( col.is_constraint )
            {
                s << "unique ";
                bool first = true;
                auto print = [&]( auto ucol )
                {
                    s << ( first ? "( " : ", " ) << ucol.column_name( ucol );
                    first = false;
                };
                typename col_t::columns().each( print );
                s << " )";
            }
            else
            {
                s << col.column_name( col );
                if constexpr ( col.is_primary )
                    s << " serial primary key";
                else
                    s << " " << brq::sql::type_map[ typeid( typename col_t::type ) ];
                if constexpr ( col.is_foreign )
                    s << " references " << get_name( typename col_t::table() )
                    << "( " << typename col_t::column().column_name( typename col_t::column() ) << " )";
                if constexpr ( !col.is_nullable )
                    s << " not null";
            }
            first = false;
        };
        typename table::all().each( print_col );
        return s << " )";
    }

    template< typename... tables_ >
    struct schema : cons_list_t< tables_... > {};

    struct txn;

    struct conn
    {
        PGconn *_handle = nullptr;
        PGconn *handle() { return _handle; }

        const char *errmsg() { return PQerrorMessage( _handle ); }

        conn( std::string s )
        {
            if ( !( _handle = PQconnectdb( s.c_str() ) ) )
                throw std::bad_alloc();
            if ( PQstatus( _handle ) != CONNECTION_OK )
                raise< error >() << "connecting to " << s << " " << errmsg();
        }

        ~conn()
        {
            PQfinish( _handle );
        }

        txn begin();
    };

    template< typename... cols >
    struct row
    {
        using columns_t = brq::cons_list_t< cols... >;
        using values_t  = brq::cons_list_t< typename cols::type... >;
        values_t _values;

        row() = default;
        row( typename cols::type... v ): _values( v... ) {}

        template< typename col, typename cs_t, typename vs_t >
        auto &get( vs_t &vs )
        {
            if constexpr ( std::is_same_v< col, typename cs_t::car_t > )
                             return vs.car;
            else
                return get< col, typename cs_t::cdr_t >( vs.cdr );
        }

        template< typename col >
        auto &get() { return get< col, columns_t >( _values ); }
    };

    template< typename... cols >
    struct iterator
    {
        PGresult *_result;
        int _row = 0, _col = 0;

        bool operator==( const iterator &o ) const { return o._result == _result && o._row == _row; }
        bool operator!=( const iterator &o ) const { return !( *this == o ); }

        iterator( PGresult *res, int row ) : _result( res ), _row( row ) {}
        iterator &operator++() { ++_row; _col = 0; return *this; }
        iterator operator++( int ) { auto r = *this; ++ (*this); return r; }

        template< typename T >
        void fetch_raw( T &t )
        {
            ASSERT( !PQgetisnull( _result, _row, _col ) );
            std::memcpy( &t, PQgetvalue( _result, _row, _col ), sizeof( T ) );
        }

        void fetch_one( int32_t &t ) { fetch_raw( t ); t = ntohl( t ); }
        void fetch_one( int16_t &t ) { fetch_raw( t ); t = ntohs( t ); }

        void fetch_one( std::u32string &us )
        {
            const char *data = PQgetvalue( _result, _row, _col );
            std::wstring_convert< std::codecvt_utf8< char32_t >, char32_t > conv;
            us = conv.from_bytes( data, data + PQgetlength( _result, _row, _col ) );
        }

        void fetch_one( std::string &s )
        {
            const char *data = PQgetvalue( _result, _row, _col );
            s = std::string( data, data + PQgetlength( _result, _row, _col ) );
        }

        row< cols... > operator*()
        {
            row< cols... > r;
            r._values.each( [&]( auto &v ) { fetch_one( v ); ++ _col; } );
            return r;
        }
    };

    template< typename... cols >
    struct stmt
    {
        using result_t = row< cols... >;

        conn &_conn;
        std::string _txt;

        std::vector< std::unique_ptr< char[] > > _memory;
        std::vector< const char * > _params;
        std::vector< int > _lengths;
        PGresult *_result = nullptr;

        using iterator = sql::iterator< cols... >;
        iterator begin() { return iterator( _result, 0 ); }
        iterator end()   { return iterator( _result, PQntuples( _result ) ); }

        void bind_mem( const char *data, int size )
        {
            _lengths.push_back( size );
            _memory.emplace_back( new char[ size ] );
            std::memcpy( _memory.back().get(), data, size );
            _params.push_back( _memory.back().get() );
        }

        template< typename T >
        stmt( conn &c, const T &t ) : _conn( c )
        {
            string_builder bld;
            bld << t;
            _txt = bld.buffer();
        }

        template< typename T >
        void bind_raw( const T &t ) { bind_mem( reinterpret_cast< const char * >( &t ), sizeof( T ) ); }

        void bind_one( int32_t &t ) { t = htonl( t ); bind_raw( t ); }
        void bind_one( int16_t &t ) { t = htons( t ); bind_raw( t ); }
        void bind_one( const std::string &s ) { bind_mem( s.data(), s.size() ); }
        void bind_one( std::u32string &us )
        {
            std::wstring_convert< std::codecvt_utf8< char32_t >, char32_t > conv;
            auto str = conv.to_bytes( &*us.begin(), &*us.end() );
            bind_mem( str.data(), str.size() );
        }

        stmt &exec()
        {
            std::vector< int > formats( _params.size(), 1 );

            TRACE( "exec:", _txt );
            _result = PQexecParams( _conn.handle(), _txt.c_str(), _params.size(), nullptr,
                                    _params.data(), _lengths.data(), formats.data(), 1 );

            auto r = PQresultStatus( _result );
            if ( r != PGRES_COMMAND_OK && r != PGRES_TUPLES_OK )
                raise< error >() << "executing " << _txt << ": " << _conn.errmsg();

            return *this;
        }

        template< typename list_t >
        stmt &bind_list( list_t list )
        {
            int count = 0;
            list.each( [&]( auto ) { ++count; } );
            _params.reserve( count );
            _memory.reserve( count );

            list.each( [&]( auto &v ) { bind_one( v ); } );
            return *this;
        }

        template< typename... args >
        stmt &bind( const args &... vs )
        {
            return bind_list( cons_list( vs... ) );
        }

        stmt( conn &c, const std::string &s ) : _conn( c ), _txt( s )
        {
        }
    };

    template< typename select, typename tab >
    struct select_join
    {
        template< typename stream >
        friend auto operator<<( stream &s, select_join ) -> decltype( s << "" )
        {
            return s << select() << " join " << name( tab() ) << " on " << "? = ?";
        }
    };

    template< typename cols, typename tab, typename stmt >
    struct select_tab
    {
        conn &_conn;
        select_tab( conn &c ) : _conn( c ) {}

        template< typename stream >
        friend auto operator<<( stream &s, const select_tab &st ) -> decltype( s << "" )
        {
            return s << cols( st._conn ) << " from " << get_name( tab() );
        }

        template< typename table >
        select_join< select_tab, table > join() { return { _conn }; }

        stmt exec() { return std::move( stmt( _conn, *this ).exec() ); }
    };

    template< typename... cols >
    struct select_cols
    {
        conn &_conn;
        select_cols( conn &c ) : _conn( c ) {}

        template< typename table >
        select_tab< select_cols< cols... >, table, stmt< cols... > > from() { return { _conn }; }

        template< typename stream >
        friend auto operator<<( stream &s, select_cols ) -> decltype( s << "" )
        {
            s << "select ";
            bool first = true;
            cons_list( cols()... ).each( [&]( auto c )
            {
                s << ( first ? "" : ", " ) << c.column_name( c ); first = false;
            } );
            return s;
        }
    };

    template< typename table >
    struct insert
    {
        conn &_conn;
        insert( conn &c ) : _conn( c ) {}

        template< typename... cols >
        stmt< cols... > values( const typename cols::type &... v )
        {
            string_builder bld;
            bld << "insert into " << get_name( table() );
            cons_list_t< cols... > l;
            bool first = true;
            l.each( [&]( auto &col )
            {
                bld << ( first ? " ( " : ", " ) << col.column_name( col ); first = false;
            } );
            bld << " ) values ";
            int i = 1;
            l.each( [&]( auto ) { bld << ( i == 1 ? " ( " : ", " ) << "$" << i; i ++; } );
            bld << " )";
            stmt< cols... > s( _conn, bld.buffer() );
            s.bind( v... );
            return s;
        }
    };

    struct txn
    {
        conn &_conn;
        bool _closed = false;

        explicit txn( conn &conn ) : _conn( conn )
        {
            exec( "begin transaction" );
        }
        txn( txn&& rhs ) noexcept;

        txn() = delete;
        txn& operator=( const txn &rhs ) = delete;

        txn &commit()
        {
            ASSERT( !_closed );
            exec( "commit transaction" );
            _closed = true;
            return *this;
        }

        txn &rollback() noexcept
        {
            ASSERT( !_closed );
            exec( "rollback transaction" );
            _closed = true;
            return *this;
        }

        txn &exec( std::string q )
        {
            stmt<> s( _conn, q );
            s.exec();
            return *this;
        }

        template< typename schema >
        txn &initdb( schema s, bool clear = false )
        {
            auto drop = [&]( auto t )
            {
                string_builder q;
                q << "drop table if exists " << get_name( t ) << " cascade";
                exec( q.buffer() );
            };

            auto create = [&]( auto t )
            {
                string_builder q;
                q << t;
                exec( q.buffer() );
            };

            if ( clear )
                s.reverse().each( drop );
            s.each( create );
            return *this;
        }

        template< typename... args >
        select_cols< args... > select() { return { _conn }; }

        template< typename table >
        insert< table> insert_into() { return { _conn }; }

        ~txn() noexcept { if ( !_closed ) rollback(); }
    };

    txn conn::begin() { return txn( *this ); }

}

namespace brq
{
    using sql_connection = sql::conn;
    using sql_error      = sql::error;
    template< typename... args >
    using sql_schema     = sql::schema< args... >;
}
