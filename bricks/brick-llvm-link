/*
 * (c) 2014-2016 Vladimír Štill
 * (c) 2014, 2015 Petr Ročkai
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#pragma once

#include "llvm/ADT/fallible_iterator.h"
#include <llvm/Linker/Linker.h>
#include <llvm/Bitcode/BitcodeReader.h>
#include <llvm/Bitcode/BitcodeWriter.h>
#include <llvm/IR/GlobalValue.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/Module.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/IRBuilder.h>
#include <llvm/IR/DiagnosticPrinter.h>
#include <llvm/IR/DiagnosticInfo.h>
#include <llvm/IRReader/IRReader.h>
#include <llvm/Support/SourceMgr.h>
#include <llvm/Support/raw_ostream.h>
#include <llvm/Support/raw_os_ostream.h>
#include <llvm/Support/FileSystem.h>
#include <llvm/Object/ArchiveWriter.h>
#include <llvm/Object/IRObjectFile.h>
#include <llvm/Transforms/Utils/Cloning.h>

#include <brick-llvm>
#include <brick-assert>
#include <brick-types>
#include <brick-fs>
#include <brick-mmap>

#include <vector>
#include <string>
#include <initializer_list>
#include <unordered_set>
#include <unordered_map>
#include <iostream>
#include <set>
#include <sstream>
#include <algorithm>
#include <string_view>

namespace std
{
    template<> struct hash< llvm::StringRef >
    {
        size_t operator()( llvm::StringRef sr ) const
        {
            return hash< std::string_view >()( std::string_view( sr.data(), sr.size() ) );
        }
    };
}

namespace brick {

// forward declaration of friend
namespace t_llvm { struct LinkerTest; };

namespace llvm {


// Write modules in the given range into a GNU archive at 'out'
template< typename It >
inline void writeArchive( It begin, It end, std::string out )
{
    namespace object = ::llvm::object;

    std::set< std::string > names;
    std::vector< std::pair< std::string, std::string > > data; // Module bitcode-identifier pairs
    data.reserve( end - begin );
    std::vector< ::llvm::NewArchiveMember > members;

    for ( auto &mod : ::llvm::iterator_range< It >( begin, end ) )
    {
        auto &bc = data.emplace_back( "", brq::basename( mod->getModuleIdentifier() ) );

        // Error if we already saw this module
        if ( !names.emplace( bc.second ).second )
            throw std::runtime_error( "member " + bc.second + " multiply defined creating " + out );

        // Write the bitcode into bc.first
        ::llvm::raw_string_ostream stream( bc.first );
        ::llvm::WriteBitcodeToFile( *mod.get(), stream );
        stream.flush();

        // Create a new archive member
        members.emplace_back( ::llvm::MemoryBufferRef( bc.first, bc.second ) );
    }

    // Write into 'out'
    brq::create_file( out );
    auto res = ::llvm::writeArchive( out, members, true, object::Archive::K_GNU, true, false );
    if ( res )
        brq::llvm_throw( res );
}

using Archive = ::llvm::object::Archive;

// A helper used for reading archives, which can be loaded either from the filesystem
// (in which case it maps the archive into the memory), or come directly from the memory.

struct ArchiveReader
{
    using Ctx = ::llvm::LLVMContext;

    explicit ArchiveReader( std::shared_ptr< Ctx > ctx )
        : _ctx( ctx ), _err( ::llvm::Error::success() )
    {
        if ( !_ctx )
            _ctx.reset( new ::llvm::LLVMContext() );
    }

    explicit ArchiveReader( std::string filename, std::shared_ptr< Ctx > ctx = nullptr ) :
        ArchiveReader( ctx )
    {
        _data = mmap::MMap( filename, mmap::ProtectMode::Read | mmap::ProtectMode::Private );

        auto ec = ::llvm::Error::success();
        _archive = std::make_unique< Archive >( ::llvm::MemoryBufferRef(
                        ::llvm::StringRef( _data.left().data(), _data.left().size() ), filename ), ec );
        if ( ec )
            brq::llvm_throw( ec );
    }

    explicit ArchiveReader( std::string filename, std::string_view contents, std::shared_ptr< Ctx > ctx = nullptr ) :
        ArchiveReader( ctx )
    {
        auto ec = ::llvm::Error::success();
        _archive = std::make_unique< Archive >( ::llvm::MemoryBufferRef(
                        ::llvm::StringRef( contents.data(), contents.size() ), filename ), ec );
        if ( ec )
            brq::llvm_throw( ec );
    }

    explicit ArchiveReader( std::string filename, std::string &&contents, std::shared_ptr< Ctx > ctx = nullptr ) :
        ArchiveReader( ctx )
    {
        _data = std::move( contents );
        auto ec = ::llvm::Error::success();
        _archive = std::make_unique< Archive >( ::llvm::MemoryBufferRef( _data.right(), filename ), ec );
        if ( ec )
            brq::llvm_throw( ec );
    }

    explicit ArchiveReader( std::unique_ptr< ::llvm::MemoryBuffer > buffer, std::shared_ptr< Ctx > ctx = nullptr ) :
        ArchiveReader( ctx )
    {
        _buffer = std::move( buffer );
        auto ec = ::llvm::Error::success();
        _archive = std::make_unique< Archive >( _buffer->getMemBufferRef(), ec );
        if ( ec )
            brq::llvm_throw( ec );
    }

    ArchiveReader( ArchiveReader && ) = default;

    ~ArchiveReader()
    {
        if ( _err )
            brq::llvm_throw( _err );
    }

    // An iterator allowing nice access to modules contained in an archive
    struct BitcodeIterator : types::Eq
    {
        using Underlying = Archive::child_iterator;

        BitcodeIterator( Underlying beg, Underlying end, ArchiveReader *parent,
                         bool bump = true )
            : _it( beg ), _end( end ), _parent( parent )
        {
            if ( bump )
                _bump();
        }

        BitcodeIterator( BitcodeIterator && ) = default;
        BitcodeIterator( const BitcodeIterator &o ) :
            _it( o._it ), _end( o._end ), _parent( o._parent ), _bc( nullptr )
        { }

        ::llvm::Module &get()
        {
            _load( true );
            return *_bc.get();
        }

        ::llvm::StringRef getName()
        {
            auto name = _it->getName();
            if ( !name )
            {
                auto err = name.takeError();
                brq::llvm_throw( err );
            }
            return name.get();
        }

        ::llvm::Module &operator*()  { return get(); }
        ::llvm::Module *operator->() { return &get(); }

        std::unique_ptr< ::llvm::Module > take()
        {
            _load( true );
            return std::move( _bc );
        }

        ::llvm::Module *borrow()
        {
            _load( true );
            return _bc.get();
        }

        bool operator==( const BitcodeIterator &o ) const { return _it == o._it;  }

        BitcodeIterator &operator++()
        {
            ++_it;
            _bump();
            return *this;
        }

        BitcodeIterator operator++( int )
        {
            BitcodeIterator copy( _it, _end, _parent, std::move( _bc ) );
            ++(*this);
            return copy;
        }

      private:
        using IRObjectFile = ::llvm::object::IRObjectFile;

        // Load the bitcode for the current archive member
        bool _load( bool errorIsFatal )
        {
            if ( !_bc )
            {
                auto buf = _it->getAsBinary( _parent->_ctx.get() );
                if ( !buf && errorIsFatal )
                {
                    auto err = buf.takeError();
                    brq::llvm_throw( err );
                }
                if ( !buf )
                    return false;

                auto bc_buf = IRObjectFile::findBitcodeInMemBuffer( buf.get()->getMemoryBufferRef() );

                if ( !bc_buf )
                    brq::llvm_throw( bc_buf.takeError() );

                auto parsed = ::llvm::parseBitcodeFile( bc_buf.get(), *_parent->_ctx.get() );
                if ( !parsed )
                    return false;
                _bc = std::move( parsed.get() );
            }
            return true;
        }

        void _bump()
        {
            if ( _parent->_err )
                brq::llvm_throw( _parent->_err );
            _bc.reset();
        }

        BitcodeIterator( Underlying beg, Underlying end, ArchiveReader *parent,
                         std::unique_ptr< ::llvm::Module > bc ) :
            _it( beg ), _end( end ), _parent( parent ), _bc( std::move( bc ) )
        { }

        Underlying _it;
        Underlying _end;
        ArchiveReader *_parent;
        std::unique_ptr< ::llvm::Module > _bc;
    };

    ::llvm::iterator_range< BitcodeIterator > modules()
    {
        return { modules_begin(), modules_end() };
    }

    BitcodeIterator modules_begin()
    {
        auto res = BitcodeIterator( _archive->child_begin( _err ), _archive->child_end(), this );
        if ( _err ) brq::llvm_throw( _err );
        return res;
    }

    BitcodeIterator modules_end()
    {
        return BitcodeIterator( _archive->child_end(), _archive->child_end(), this );
    }

    BitcodeIterator iterator( ::llvm::object::Archive::child_iterator raw )
    {
        return BitcodeIterator( raw, _archive->child_end(), this, false );
    }

    const Archive &archive() const { return *_archive; }

  private:
    types::Either< mmap::MMap, std::string > _data;
    std::unique_ptr< Archive > _archive;
    std::unique_ptr< ::llvm::MemoryBuffer > _buffer;
    std::shared_ptr< Ctx > _ctx;
    ::llvm::Error _err;
};

// A linker, capable of creating a composite module out of individual modules
// and archives. 

struct Linker
{
    using Module = ::llvm::Module;
    using StringRef = ::llvm::StringRef;

    Linker( std::shared_ptr< ::llvm::LLVMContext > ctx ) : _ctx( ctx ) {}

    ::llvm::Linker &linker()
    {
        ASSERT( _module );
        if ( !_link )
            _link.reset( new ::llvm::Linker( *_module ) );
        return *_link;
    }

    void link( Module &src )
    {
        return link( std::unique_ptr< Module >( ::llvm::CloneModule( src ) ) );
    }

    // Add undefined functions from src to the combined module,
    // then update the list of undefined functions accordingly
    void link_decls( std::unique_ptr< Module > src )
    {
        if ( !_module )
            _module.reset( new ::llvm::Module( "placeholder", *_ctx ) );

        for ( auto &f : *src )
            if ( f.isDeclaration() )
                _module->getOrInsertFunction( f.getName(),
                                              f.getFunctionType(),
                                              f.getAttributes() );
        
        _updateUndefined();
    }

    // Link the 'src' module into the composite module
    void link( std::unique_ptr< Module > src )
    {
        ASSERT( src != nullptr );

        // In case the module was loaded lazily, we need to materialize definitions
        if ( auto err = src->materializeAll() )
            brq::llvm_throw( err );

        // If there is no composite module, we use 'src' as our new composite base
        if ( !_module )
            _module = std::move( src );

        if ( src && linker().linkInModule( std::move( src ) ) )
            brq::raise() << "ERROR: while linking '" << src->getModuleIdentifier() << "'";

        _updateUndefined();
    }

    using ModuleVector = std::vector< std::unique_ptr< Module > >;

    static std::string modname( Module *const *m )
    {
        return (*m)->getName().str();
    }

    static std::string modname( ArchiveReader::BitcodeIterator it )
    {
        return it.borrow()->getName().str();
    }

    // A map associating symbol names with modules they are defined in
    template< typename K, typename V >
    struct ModuleMap : std::unordered_map< K, V >
    {
        // Find the first symbol in 'undef' that has a definition in this map
        // and return it's respective module or nullptr if no symbol in 'undef'
        // has a definition here 
        std::unique_ptr< Module > findFirst( const std::vector< StringRef > &undef )
        {
            for ( auto u : undef )
            {
                auto it = this->find( u.str() );
                if ( it != this->end() )
                {
                    TRACE( "pulling in", modname( it->second ), "for", u.str() );
                    return _takeModule( it->second );
                }
            }
            return nullptr;
        }
    };

    // A ModuleMap that automatically fills itself with symbols defined
    // in a specified range of module iterators
    template< typename It >
    struct ModuleFinder : ModuleMap< std::string, It >
    {
        ModuleFinder( It begin, It end )
        {
            for ( auto it = begin; it != end; ++it )
                _symbols( _getModule( it ), true,
                      [&]( StringRef name, auto ) { this->emplace( name, it ); } );
        }

    };

    // A ModuleMap that automatically fills itself with symbols defined in an archive
    struct SymtabFinder : ModuleMap< StringRef, ArchiveReader::BitcodeIterator >
    {
        SymtabFinder( ArchiveReader &r )
        {
            for ( auto s : r.archive().symbols() )
            {
                auto m = s.getMember();
                if ( !m )
                {
                    auto e = m.takeError();
                    brq::llvm_throw( e );
                }

                ::llvm::Error Err = ::llvm::Error::success();
                Archive::child_iterator iter = Archive::child_iterator::itr( m.get(), Err );
                this->emplace( s.getName(), r.iterator( iter ) );
            }
        }
    };

    // Link the specified archive into the composite module
    // This links only those modules that contain definitions for 
    // undefined symbols, which has semantical implications, as
    // not every global constructor in an archive must necessarily
    // be run.
    template< typename Finder >
    void linkArchive( Finder finder )
    {
        while ( true )
        {
            auto toLink = finder.findFirst( _undefined );
            if ( !toLink )
                return; // no more symbols needed from this archive
            
            link( std::move( toLink ) );
        }
    }

    template< typename It >
    void linkArchive( It begin, It end )
    {
        linkArchive( ModuleFinder< It >( begin, end ) );
    }

    void linkArchive( std::initializer_list< ::llvm::Module * > mods )
    {
        linkArchive( mods.begin(), mods.end() );
    }

    void linkArchive( ArchiveReader &r )
    {
        if ( r.archive().hasSymbolTable() )
            linkArchive( SymtabFinder( r ) );
        else
            linkArchive( r.modules_begin(), r.modules_end() );
    }

    Module *get() { return _module.get(); }
    const Module *get() const { return _module.get(); }

    std::unique_ptr< Module > take()
    {
        _link.reset( nullptr );
        return std::move( _module );
    }

    bool hasModule() { return _module != nullptr; }

  private:
    void _error( const ::llvm::DiagnosticInfo &i )
    {
        ::llvm::raw_os_ostream err( std::cerr );
        err << "LLVM Linker error: ";
        ::llvm::DiagnosticPrinterRawOStream printer( err );
        i.print( printer );
        err << "\n";
        err.flush();
    }

    template< typename It >
    static std::unique_ptr< Module > _takeModule( It it )
    {
        return std::unique_ptr< Module >( ::llvm::CloneModule( **it ) );
    }

    static std::unique_ptr< Module > _takeModule( ArchiveReader::BitcodeIterator &bcit )
    {
        return bcit.take();
    }

    template< typename It >
    static Module &_getModule( It it ) { return **it; }

    static Module &_getModule( ArchiveReader::BitcodeIterator &bcit ) { return *bcit; }

    // Call yield callback either for all defined or all undefined symbols in a module
    template< typename Yield >
    static void _symbols( Module &m, bool defined, Yield yield )
    {
        for ( auto &fn : m )
            if ( fn.isDeclaration() == !defined && fn.hasName() )
                yield( fn.getName(), &fn );
        for ( auto &glo : m.getGlobalList() )
            if ( glo.isDeclaration() == !defined && glo.hasName() )
                yield( glo.getName(), &glo );
        for ( auto &ali : m.getAliasList() )
            if ( ali.isDeclaration() == !defined && ali.hasName() )
                yield( ali.getName(), &ali );
    }

    // Fill the list of undefined symbols with all symbols that lack definition in the composite module
    void _updateUndefined()
    {
        _undefined.clear();
        _symbols( *get(), false, [this]( StringRef name, auto ) { _undefined.emplace_back( name ); } );
    }

    friend brick::t_llvm::LinkerTest;

    std::unique_ptr< ::llvm::Linker > _link;
    std::unique_ptr< ::llvm::Module > _module; // The composite module
    std::shared_ptr< ::llvm::LLVMContext > _ctx;
    std::vector< StringRef > _undefined; // A list of undefined symbols
};

}

namespace t_llvm {

using namespace brick::llvm;
using ::llvm::cast;
using ::llvm::dyn_cast;
using ::llvm::isa;
using ::llvm::Module;
using ::llvm::StringRef;
using ::llvm::Type;
using ::llvm::FunctionType;
using ::llvm::Function;
using ::llvm::Module;

struct LinkerTest {

    std::shared_ptr< ::llvm::LLVMContext > ctx;
    LinkerTest() : ctx( new ::llvm::LLVMContext ) {}

    Function *declareFun( Module &m, StringRef name ) {
        auto *fun = cast< Function >( m.getOrInsertFunction( name,
                        FunctionType::get( Type::getInt32Ty( *ctx ), false ) ).getCallee() );
        ASSERT( fun->isDeclaration() );
        return fun;
    }

    Function *defineFun( Module &m, StringRef name ) {
        auto *fun = declareFun( m, name );
        auto bb = ::llvm::BasicBlock::Create( *ctx, "entry", fun );
        ::llvm::IRBuilder<> irb( bb );
        irb.CreateRet( irb.getInt32( 0 ) );
        ASSERT( !fun->isDeclaration() );
        return fun;
    }

    template< typename X >
    static int count( X &x, StringRef ref ) {
        return std::count( x.begin(), x.end(), ref );
    }

    TEST(undefined_single) {
        auto m = std::make_unique< ::llvm::Module >( "test.ll", *ctx );
        declareFun( *m, "fun" );

        Linker link( ctx );
        link.link( std::move( m ) );
        ASSERT_EQ( link._undefined.size(), 1 );
        ASSERT_EQ( count( link._undefined, "fun" ), 1 );
    }

    TEST(undefined_two) {
        auto m = std::make_unique< ::llvm::Module >( "test.ll", *ctx );
        declareFun( *m, "fun" );

        auto m2 = std::make_unique< ::llvm::Module >( "test2.ll", *ctx );
        auto fun = defineFun( *m2, "fun" );
        auto foo = declareFun( *m2, "foo" );
        ::llvm::IRBuilder<> irb( &*fun->begin() );
        irb.CreateCall( foo );

        Linker link( ctx );
        link.link( std::move( m ) );
        ASSERT_EQ( link._undefined.size(), 1 );
        ASSERT_EQ( count( link._undefined, "fun" ), 1 );
        link.link( std::move( m2 ) );
        ASSERT_EQ( link._undefined.size(), 1 );
        ASSERT_EQ( count( link._undefined, "foo" ), 1 );
    }

    template< typename Doit, typename Check >
    void archive_simple( Doit doit, Check check ) {
        auto ma = std::make_unique< Module >( "a", *ctx );
        auto mb = std::make_unique< Module >( "b", *ctx );
        auto mmain = std::make_unique< Module >( "main", *ctx );

        defineFun( *mmain, "main" );
        declareFun( *mmain, "foo" );

        defineFun( *ma, "bar" );
        defineFun( *ma, "baz" );

        defineFun( *mb, "foo" );
        defineFun( *mb, "foobar" );

        {
            Linker link( ctx );
            link.link( std::move( mmain ) );
            doit( link, ma.get(), mb.get(), link.get() );
            ASSERT_EQ( link._undefined.size(), 0 );
            check( link );
        }
    }

    static void checkALinked( Linker &link ) {
        ASSERT( link.get()->getFunction( "main" ) );
        ASSERT( !link.get()->getFunction( "main" )->isDeclaration() );
        ASSERT( link.get()->getFunction( "foo" ) );
        ASSERT( !link.get()->getFunction( "foo" )->isDeclaration() );
        ASSERT( link.get()->getFunction( "foobar" ) );
        ASSERT( !link.get()->getFunction( "foobar" )->isDeclaration() );
        ASSERT( !link.get()->getFunction( "bar" ) );
        ASSERT( !link.get()->getFunction( "baz" ) );
    }

    TEST(archive_simple_a_in_ab) {
        archive_simple( []( auto &link, auto ma, auto mb, auto ) { link.linkArchive( { ma, mb } ); },
                        checkALinked );
    }

    TEST(archive_simple_a_in_ba) {
        archive_simple( []( auto &link, auto ma, auto mb, auto ) { link.linkArchive( { mb, ma } ); },
                        checkALinked );
    }

    TEST(archive_simple_both)
    {
        archive_simple( [this]( auto &link, auto ma, auto mb, auto mmain ) {
                declareFun( *mmain, "baz" );
                link.linkArchive( { ma, mb } );
            }, []( auto &link ) {
                ASSERT( link.get()->getFunction( "main" ) );
                ASSERT( !link.get()->getFunction( "main" )->isDeclaration() );
                ASSERT( link.get()->getFunction( "foo" ) );
                ASSERT( !link.get()->getFunction( "foo" )->isDeclaration() );
                ASSERT( link.get()->getFunction( "foobar" ) );
                ASSERT( !link.get()->getFunction( "foobar" )->isDeclaration() );
                ASSERT( link.get()->getFunction( "bar" ) );
                ASSERT( !link.get()->getFunction( "bar" )->isDeclaration() );
                ASSERT( link.get()->getFunction( "baz" ) );
                ASSERT( !link.get()->getFunction( "baz" )->isDeclaration() );
            } );
    }

    TEST(ar_archive)
    {
        brq::TempDir dir( ".brick-llvm-test-XXXXXX", brq::AutoDelete::Yes, brq::UseSystemTemp::Yes );
        auto ma = std::make_unique< Module >( "a", *ctx );
        auto mb = std::make_unique< Module >( "b", *ctx );
        declareFun( *ma, "foo" );
        declareFun( *mb, "bar" );

        auto name = brq::join_path( dir.path, "test.a" );
        auto il = { std::move( ma ), std::move( mb ) };
        writeArchive( il.begin(), il.end(), name );

        ArchiveReader reader( name );
        int count = 0;
        for ( auto &m : reader.modules() ) {
            ++count;
            ASSERT( count != 1 || m.getFunction( "foo" ) );
            ASSERT( count != 2 || m.getFunction( "bar" ) );
        }
        ASSERT_EQ( count, 2 );
    }
};

}

}
