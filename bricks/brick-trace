// -*- mode: C++; indent-tabs-mode: nil; c-basic-offset: 4 -*-

/*
 * Macros for run-time-configurable debug tracing.
 */

/*
 * (c) 2019 Petr Roƒçkai <code@fixp.eu>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef BRICK_TRACE_H
#define BRICK_TRACE_H

#include <brick-assert>

#ifdef __divine__
#include <sys/trace.h>
#else
#include <iostream>
#include <string_view>
#include <unordered_set>
#include <cstring>
#define __debugfn
#endif

#ifdef NDEBUG

#define TRACE(...) static_cast< decltype(__VA_ARGS__, void(0)) >(0)

#else

#define TRACE(...) ::brick::trace::trace_fn( BRICK_LOCATION( "" ), __VA_ARGS__ )

#endif

namespace brick::trace
{

    template< typename T >
    auto format_one( int, std::stringstream &acc, const T &t ) noexcept
        -> decltype( acc << t ) &
    {
        return acc << t;
    }

    template< typename T >
    auto &format_one( short, std::stringstream &acc, const T & ) noexcept
    {
        return acc << "<unknown>";
    }

    static inline void format( std::stringstream &acc ) noexcept
    {
#ifdef __divine__
        std::string x = acc.str();
        __dios_trace_internal( 0, "%s", x.c_str() );
#else
        acc << "\n";
        std::cerr << acc.str() << std::flush;
#endif
    }

    template< typename A, typename... Args >
    void format( std::stringstream &acc, const A &a, const Args & ... as ) noexcept
    {
        format_one( 0, acc, a );
        acc << " ";
        format( acc, as... );
    }

#ifdef __divine__
    static bool enabled( const _assert::Location & ) { return true; }
#else
    using Set = std::unordered_set< std::string_view >;

    static inline Set init( const char *str_ )
    {
        if ( !str_ )
            return Set();

        std::string_view str( str_ );
        Set i;
        while ( !str.empty() )
        {
            auto s = str.find( ',' );
            i.insert( str.substr( 0, s ) );
            if ( s == str.npos )
                return i;
            str = str.substr( s + 1 );
        }
        return i;
    }

    static bool enabled( const _assert::Location &l )
    {
        static Set yes = init( getenv( "BRICK_TRACE" ) ), no = init( getenv( "BRICK_NOTRACE" ) );
        static bool all = getenv( "BRICK_TRACE" ) && !strcmp( getenv( "BRICK_TRACE" ), "all" );
        return ( all || yes.count( l.filename() ) || yes.count( l.short_info() ) ) &&
               !no.count( l.filename() ) && !no.count( l.short_info() );
    }
#endif

    template< typename... Args >
    __debugfn void trace_fn( brick::_assert::Location l, const Args &... args ) noexcept
    {
        if ( !enabled( l ) )
            return;
        std::stringstream acc;
        acc << l.short_info() << ": ";
#ifndef __divine__
        acc << "[" << pthread_self() << "] ";
#endif
        format( acc, args... );
    }
}

#endif

// vim: syntax=cpp tabstop=4 shiftwidth=4 expandtab
