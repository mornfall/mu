// -*- mode: C++; indent-tabs-mode: nil; c-basic-offset: 4 -*-

/*
 * (c) 2006-2019 Petr Roƒçkai <code@fixp.eu>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <brick-trace>
#include <exception>
#include <unistd.h>

/* This file provides an assortment of assertion macros which provide
 * additional information about the circumstances of assertion failures, for
 * instance ASSERT_EQ will print both the source code statement and the actual
 * values that unexpectedly compared inequal.
 *
 * The assertion failure mechanism is currently implemented as an exception,
 * with the intention to be catchable, if the user so desires. This can be used
 * to e.g. print additional context information relevant to the failure, as the
 * stack is being unwound.
 *
 * Additionally, this files provides a stub version of the TEST() macro, a real
 * version of which is implemented in brick-unittest. This allows unit test
 * suites to be included in header files along with the code that they test
 * (without the testcases being actually registered or instantiatied unless the
 * unit testsuite is being built). */

#ifndef TEST
#define TEST(n)         template< bool > void n()
#endif

#define BRICK_SHARP_FIRST(x, ...) #x
#define BRICK_ASSERT(t,l,...) ::brq::assert_ ## t ## _fn( BRICK_LOCATION( l ), __VA_ARGS__ )

#ifdef NDEBUG

#define ASSERT(...)       static_cast< decltype(__VA_ARGS__, void(0)) >(0)
#define ASSERT_PRED(p, x) static_cast< decltype(p, x, void(0)) >(0)
#define ASSERT_EQ(x, y)   static_cast< decltype(x, y, void(0)) >(0)
#define ASSERT_LEQ(x, y)  static_cast< decltype(x, y, void(0)) >(0)
#define ASSERT_LT(x, y)   static_cast< decltype(x, y, void(0)) >(0)
#define ASSERT_NEQ(x, y)  static_cast< decltype(x, y, void(0)) >(0)

#else

#define ASSERT(...)      BRICK_ASSERT( bool, BRICK_SHARP_FIRST( __VA_ARGS__, ignored ), __VA_ARGS__ )
#define ASSERT_P(p, x)   BRICK_ASSERT( pred, #p "( " #x " )", x, p( x ) )
#define ASSERT_EQ(x, y)  BRICK_ASSERT( eq,   #x " == " #y, x, y )
#define ASSERT_LT(x, y)  BRICK_ASSERT( lt,   #x " < "  #y, x, y )
#define ASSERT_LEQ(x, y) BRICK_ASSERT( leq,  #x " <= " #y, x, y )
#define ASSERT_NEQ(x, y) BRICK_ASSERT( neq,  #x " != " #y, x, y )

#endif

/* you must #include <brick-string> to use UNREACHABLE_F */
#define UNREACHABLE_F(...) BRICK_ASSERT( die, "", ::brick::string::fmtf(__VA_ARGS__) )
#define UNREACHABLE(...)   BRICK_ASSERT( die, "", __VA_ARGS__ )
#define UNREACHABLE_()     BRICK_ASSERT( die, "", "" )
#define NOT_IMPLEMENTED()  BRICK_ASSERT( die, "", "missing implementation" )

#ifndef BRICK_ASSERT_H
#define BRICK_ASSERT_H

#define BRICK_LOCATION(stmt) ::brq::trace_location{ __LINE__, __FILE__, stmt }

namespace brq
{
    struct assert_failed : std::exception
    {
        string_builder str;

        struct fail_ref
        {
            assert_failed &ref;
            fail_ref( assert_failed &f ) : ref( f ) {}
        };

        template< typename X >
        friend inline auto operator<<( fail_ref f, const X &x )
            -> decltype( std::declval< string_builder & >() << x, f.ref )
        {
            f.ref.str << x;
            return f.ref;
        }

        assert_failed( const trace_location &l, const char *expected = "expected" )
        {
            std::string_view file( l._file );
            int slashes = 0;

            for ( auto c : file )
                if ( c == '/' )
                    ++ slashes;

            while ( slashes >= 3 )
            {
                file.remove_prefix( file.find( "/" ) + 1 );
                -- slashes;
            }

            if ( file != l._file )
                (*this) << ".../";
            (*this) << file << ": " << l.line;
            (*this) << ":\n  " << expected << " " << l.statement();
        }

#ifdef BRICKS_NOTHROW_ASSERTS
        assert_failed( assert_failed &&o )
        {
            ::write( 2, o.str.buffer(), o.str._offset );
            abort();
        }
#endif

        const char *what() const noexcept { return str.buffer(); }
    };

    template< typename X, typename... Y >
    void assert_bool_fn( const trace_location &l, const X &x, const Y & ... y  )
    {
        if ( x )
            return;
        assert_failed f( l );
        format_args( f, y... );
        throw f;
    }

    template< typename... T >
    __attribute__((noreturn))
    void assert_die_fn( const trace_location &l, const T & ... args )
    {
        assert_failed f( l, "unreachable executed:" );
        format_args( f, args... );
        throw f;
    }

#define ASSERT_FN(name, op, inv)                                                             \
    __boring static inline                                                                   \
    void assert_ ## name ## _fn( const trace_location &l, int64_t x, int64_t y )             \
    {                                                                                        \
        if ( !( x op y ) )                                                                   \
        {                                                                                    \
            assert_failed f( l );                                                            \
            f << "\n   but got "                                                             \
              << x << " " #inv " " << y << "\n";                                             \
            throw f;                                                                         \
        }                                                                                    \
        /* trace_fn( l, "assert passed:", l._statement, "[", x, #op, y, "]" ); */            \
    }                                                                                        \
    template< typename X, typename Y >                                                       \
    __boring auto assert_ ## name ## _fn( const trace_location &l, const X &x, const Y &y )  \
        -> typename std::enable_if<                                                          \
        !std::is_integral< X >::value ||                                                     \
        !std::is_integral< Y >::value >::type                                                \
    {                                                                                        \
        if ( !( x op y ) )                                                                   \
        {                                                                                    \
            assert_failed f( l );                                                            \
            f << "\n   but got "                                                             \
              << x << " " #inv " " << y << "\n";                                             \
            throw f;                                                                         \
        }                                                                                    \
        /* trace_fn( l, "assert passed:", l._statement, "[", x, #op, y, "]" ); */            \
    }

    ASSERT_FN(eq, ==, !=);
    ASSERT_FN(leq, <=, >);
    ASSERT_FN(lt, <, >=);
    ASSERT_FN(neq, !=, ==);

    template< typename X >
    __boring void assert_pred_fn( const trace_location &l, X x, bool p )
    {
        if ( !p )
        {
            assert_failed f( l );
            f << "\n   but got x = " << x << "\n";
            throw f;
        }
    }
}

#endif

// vim: syntax=cpp tabstop=4 shiftwidth=4 expandtab
