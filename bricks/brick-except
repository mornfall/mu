// -*- mode: C++; indent-tabs-mode: nil; c-basic-offset: 4 -*-

/*
 * (c) 2016 Petr Roƒçkai <code@fixp.eu>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#pragma once

#include "brick-trace"
#include <stdexcept>
#include <system_error>
#include <string>
#include <tuple>

namespace brq
{

    /* This is a base class for exceptions which arise from improper use at the
    * user level (as opposed to programmer level). Use this if you expect an
    * exception to be seen by actual users. */
    struct error : std::runtime_error
    {
        int _exit;

        error( std::string err, int exit = 1 )
            : std::runtime_error( err ), _exit( exit )
        {}

        std::string_view message() const { return what(); }
    };

    template< typename exc, typename... args_t >
    struct construct_error : string_builder
    {
        std::tuple< args_t... > _args;
        construct_error( args_t... args ) : _args( args... ) {}

        ~construct_error() noexcept( false )
        {
            if ( std::uncaught_exceptions() )
                return; /* terminate instead? */
            auto args = std::tuple_cat( _args, std::make_tuple( buffer() ) );
            std::apply( []( auto... a ) -> void { throw exc( a... ); }, args );
        }
    };

    struct system_error : std::system_error
    {
        system_error( const char *w ) : std::system_error( errno, std::system_category(), w ) {}
    };

    template< typename exc = error, typename... args_t >
    construct_error< exc, args_t... > raise( args_t... args )
    {
        return { args... };
    }

    struct finally
    {
        using fun = std::function< void() >;
        fun _fun;
        finally( fun f ) : _fun( f ) {}
        ~finally() { if ( _fun ) _fun(); }
        void skip() { _fun = fun(); }
    };
}

// vim: syntax=cpp tabstop=4 shiftwidth=4 expandtab ft=cpp
