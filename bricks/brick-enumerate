#include "brick-nat"

namespace brq::enumerate
{
    auto find_block_gen( nat index, auto block, auto size, auto update_block )
    {
        while ( true )
        {
            auto skip = std::apply( size, block );

            if ( skip <= index )
                index -= skip;
            else
                return std::tuple_cat( std::tuple{ index }, block );

            std::apply( update_block, block );
        }
    }

    auto find_block( nat index, nat block, auto size )
    {
        return find_block_gen( index, std::tuple{ block }, size, []( auto &b ) { ++ b; } );
    }

    nat nat_enum( nat index ) { return index; }

    nat tuple_block_size( nat b, int n, nat d )
    {
        ASSERT_LT( d, n );
        return b.pow( d ) * ( b - 1 ).pow( n - d - 1 );
    }

    nat tuple_block_size( nat b, int n, nat d, auto bounds )
    {
        NOT_IMPLEMENTED();
    }

    nat tuple_count( nat b, int n )
    {
        return b == 0 ? 1 : b.pow( n ) - ( b - 1 ).pow( n );
    }

    nat tuple_count( nat b, int n, auto bounds )
    {
        NOT_IMPLEMENTED();
    }

    nat tuple_bound( auto bounds )
    {
        NOT_IMPLEMENTED();
    }

    auto tuple_item( nat b, nat index, int i, nat d )
    {
        if ( i == d )
            return std::pair{ index, b - 1 };
        else
        {
            auto choices = i < d ? b : b - 1;
            return divmod( index, choices );
        }
    }

    auto tuple_block( nat b, int n, nat index )
    {
        return find_block( index, 0, [&]( auto d ) { return tuple_block_size( b, n, d ); } );
    }

    template< int n, int i = 0 >
    auto tuple_param( nat b, nat index, nat d = 0 )
    {
        ASSERT_LT( index, tuple_count( b, n ) );

        if constexpr ( i == 0 )
            std::tie( index, d ) = tuple_block( b, n, index );

        if constexpr ( i == n )
            return std::tuple{};
        else
        {
            auto [ i_next, r ] = tuple_item( b, index, i, d );
            return std::tuple_cat( tuple_param< n, i + 1 >( b, i_next, d ), std::tuple{ r } );
        }
    }

    template< int n >
    auto tuple( nat index )
    {
        if ( index == 0 )
            return tuple_param< n >( 1, 0 );

        auto b = index.nth_root( n );
        index -= ( b - 1 ).pow( n );
        std::tie( index, b ) = find_block( index, b, []( auto b ) { return tuple_count( b, n ); } );
        return tuple_param< n >( b, index );
    }
}

namespace brq
{
    template< int n > auto tuple_enum( nat index ) { return enumerate::tuple< n >( index ); }
}
