// -*- mode: C++; indent-tabs-mode: nil; c-basic-offset: 4 -*-
// C++-ification (c) 2019 Petr Rockai <code@fixp.eu>

/*  $OpenBSD: base64.c,v 1.8 2015/01/16 16:48:51 deraadt Exp $  */
/*
 * Copyright (c) 1996 by Internet Software Consortium.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM DISCLAIMS
 * ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL INTERNET SOFTWARE
 * CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
 * DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
 * PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
 * ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
 * SOFTWARE.
 */

/*
 * Portions Copyright (c) 1995 by International Business Machines, Inc.
 *
 * International Business Machines, Inc. (hereinafter called IBM) grants
 * permission under its copyrights to use, copy, modify, and distribute this
 * Software with or without fee, provided that the above copyright notice and
 * all paragraphs of this notice appear in all copies, and that the name of IBM
 * not be used in connection with the marketing of any product incorporating
 * the Software or modifications thereof, without specific, written prior
 * permission.
 *
 * To the extent it has a right to do so, IBM grants an immunity from suit
 * under its patents, if any, for the use, sale or manufacture of products to
 * the extent that such products are used for performing Domain Name System
 * dynamic updates in TCP/IP networks by means of the Software.  No immunity is
 * granted for any product per se or for any other function of any product.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", AND IBM DISCLAIMS ALL WARRANTIES,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE.  IN NO EVENT SHALL IBM BE LIABLE FOR ANY SPECIAL,
 * DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE, EVEN
 * IF IBM IS APPRISED OF THE POSSIBILITY OF SUCH DAMAGES.
 */

#pragma once

#include <cctype>
#include <cstdlib>
#include <cstring>
#include <iostream>

namespace brick {
namespace base64 {

using namespace std::literals;

inline constexpr char letters[] =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
inline constexpr char padding = '=';

/* (From RFC1521 and draft-ietf-dnssec-secext-03.txt)
   The following encoding technique is taken from RFC 1521 by Borenstein
   and Freed.  It is reproduced here in a slightly edited form for
   convenience.

   A 65-character subset of US-ASCII is used, enabling 6 bits to be
   represented per printable character. (The extra 65th character, "=",
   is used to signify a special processing function.)

   The encoding process represents 24-bit groups of input bits as output
   strings of 4 encoded characters. Proceeding from left to right, a
   24-bit input group is formed by concatenating 3 8-bit input groups.
   These 24 bits are then treated as 4 concatenated 6-bit groups, each
   of which is translated into a single digit in the base64 alphabet.

   Each 6-bit group is used as an index into an array of 64 printable
   characters. The character referenced by the index is placed in the
   output string.

                         Table 1: The Base64 Alphabet

      Value Encoding  Value Encoding  Value Encoding  Value Encoding
          0 A            17 R            34 i            51 z
          1 B            18 S            35 j            52 0
          2 C            19 T            36 k            53 1
          3 D            20 U            37 l            54 2
          4 E            21 V            38 m            55 3
          5 F            22 W            39 n            56 4
          6 G            23 X            40 o            57 5
          7 H            24 Y            41 p            58 6
          8 I            25 Z            42 q            59 7
          9 J            26 a            43 r            60 8
         10 K            27 b            44 s            61 9
         11 L            28 c            45 t            62 +
         12 M            29 d            46 u            63 /
         13 N            30 e            47 v
         14 O            31 f            48 w         (pad) =
         15 P            32 g            49 x
         16 Q            33 h            50 y

   Special processing is performed if fewer than 24 bits are available
   at the end of the data being encoded.  A full encoding quantum is
   always completed at the end of a quantity.  When fewer than 24 input
   bits are available in an input group, zero bits are added (on the
   right) to form an integral number of 6-bit groups.  Padding at the
   end of the data is performed using the '=' character.

   Since all base64 input is an integral number of octets, only the
         -------------------------------------------------                       
   following cases can arise:
   
       (1) the final quantum of encoding input is an integral
           multiple of 24 bits; here, the final unit of encoded
       output will be an integral multiple of 4 characters
       with no "=" padding,
       (2) the final quantum of encoding input is exactly 8 bits;
           here, the final unit of encoded output will be two
       characters followed by two "=" padding characters, or
       (3) the final quantum of encoding input is exactly 16 bits;
           here, the final unit of encoded output will be three
       characters followed by one "=" padding character.
   */

template< typename I, typename O >
void encode( I b, I e, O out )
{
    int srclength = e - b;
    uint8_t input[3];
    int i;

    while (2 < srclength)
    {
        input[0] = *b++;
        input[1] = *b++;
        input[2] = *b++;
        srclength -= 3;

        *out++ = letters[ input[0] >> 2 ];
        *out++ = letters[ ((input[0] & 0x03) << 4) + (input[1] >> 4) ];
        *out++ = letters[ ((input[1] & 0x0f) << 2) + (input[2] >> 6) ];
        *out++ = letters[ input[2] & 0x3f ];
    }

    /* Now we worry about padding. */
    if ( 0 != srclength )
    {
        /* Get what's left. */
        input[0] = input[1] = input[2] = '\0';
        for (i = 0; i < srclength; i++)
            input[i] = *b++;

        *out++ = letters[ input[0] >> 2 ];
        *out++ = letters[ ((input[0] & 0x03) << 4) + (input[1] >> 4) ];

        if (srclength == 1)
            *out++ = padding;
        else
            *out++ = letters[ ((input[1] & 0x0f) << 2) + (input[2] >> 6) ];
        *out++ = padding;
    }
}

/* skips all whitespace anywhere.
   converts characters, four at a time, starting at (or after)
   src from base - 64 numbers into three 8 bit bytes in the target area.
   it returns the number of data bytes stored at the target, or -1 on error.
 */

template< typename I, typename O >
void decode( I b, I e, O out )
{
    int state;
    uint8_t nextout = 0;
    const char *pos;

    state = 0;

    for ( ; b != e; ++b )
    {
        if ( std::isspace( *b ) )    /* Skip whitespace anywhere. */
            continue;

        if ( *b == padding )
            break;

        pos = std::strchr( letters, *b );
        if ( pos == nullptr )       /* A non-base64 character. */
            throw std::runtime_error( "a non-base64 character encountered" );
        int off = pos - letters;

        switch ( state )
        {
            case 0:
                nextout = off << 2;
                state = 1;
                break;
            case 1:
                nextout |= off >> 4;
                *out++ = nextout;
                nextout = (off & 0x0f) << 4;
                state = 2;
                break;
            case 2:
                nextout |= off >> 2;
                *out++ = nextout;
                nextout = (off & 0x03) << 6;
                state = 3;
                break;
            case 3:
                nextout |= off;
                *out++ = nextout;
                state = 0;
                break;
        }
    }

    /*
     * We are done decoding Base-64 chars.  Let's see if we ended
     * on a byte boundary, and/or with erroneous trailing characters.
     */

    if ( b != e && *b == padding )          /* We got a pad char. */
    {
        switch (state) {
        case 0:     /* Invalid = in first position */
        case 1:     /* Invalid = in second position */
            throw std::runtime_error( "bad base64 padding (too many pad chars)" );

        case 2:     /* Valid, means one byte of info */
            /* Skip any number of spaces. */
            for ( ++b ; b != e; b++ )
                if ( !std::isspace( *b ) )
                    break;

            /* Make sure there is another trailing = sign. */
            if ( *b != padding )
                throw std::runtime_error( "bad base64 padding (non-pad character: "s +
                                          std::to_string( *b ) + ")" );
            /* Fall through to "single trailing =" case. */
            /* FALLTHROUGH */

        case 3:     /* Valid, means two bytes of info */

            for ( ++b ; b != e ; b++ )
                if ( !std::isspace( *b ) )
                    throw std::runtime_error( "bad base64 padding (non-pad character: "s +
                                              std::to_string( *b ) + ")" );

            /*
             * Now make sure for cases 2 and 3 that the "extra"
             * bits that slopped past the last full byte were
             * zeros.  If we don't check them, they become a
             * subliminal channel.
             */
            if ( nextout != 0 )
                throw std::runtime_error( "extra bits at the end of base64 input" );
        }
    }
    else
    {
        /*
         * We ended by seeing the end of the string.  Make sure we
         * have no partial bytes lying around.
         */
        if ( state != 0 )
            throw std::runtime_error( "base64 decoding error, state = " + std::to_string( state ) );
    }

    while ( b != e && std::isspace( *b ) ) ++ b;

    if ( b != e )
    {
        std::cerr << *b << std::endl;
        throw std::runtime_error( "base64: extra characters" );
    }
}

}
}

// vim: syntax=cpp tabstop=4 shiftwidth=4 expandtab ft=cpp
